Перем ТекЗакладка, гПолучТекст ;
Перем гСпВариантовЗагрузки, гСпВариантовВыгрузки;
Перем гТабСправочникиВыгрузки;
Перем гВерсия, гПозЗаголовка, гПозВерсии, гПозРеквизитов, гРаздДанные;
Перем ФлОбновлять;
Перем гТабЗагружСпр;
Перем гТаблицаСоответствий, гТабКод;

Процедура СоздатьТаблицуСоответствий()
	гТаблицаСоответствий = СоздатьОбъект("XBase");
	гТаблицаСоответствий.ДобавитьПоле("OLD", "C", 61, 0);
	гТаблицаСоответствий.ДобавитьПоле("NEW", "C", 61, 0);
	гТаблицаСоответствий.ДобавитьИндекс("OLD_IDX", "OLD", 0, 0, "");
	гТаблицаСоответствий.СоздатьФайл(КаталогВременныхФайлов()+"MAP");
	гТаблицаСоответствий.ТекущийИндекс("OLD_IDX");
КонецПроцедуры

Процедура ЗакрытьТаблицуСоответствий()
	гТаблицаСоответствий.ЗакрытьФайл();
	гТаблицаСоответствий = 0;               
	Если ФС.СуществуетФайл(КаталогВременныхФайлов()+"MAP.DBF") = 1 Тогда
		ФС.УдалитьФайл(КаталогВременныхФайлов()+"MAP.DBF");
	КонецЕсли;
	Если ФС.СуществуетФайл(КаталогВременныхФайлов()+"MAP.CDX") = 1 Тогда
		ФС.УдалитьФайл(КаталогВременныхФайлов()+"MAP.CDX");
	КонецЕсли;
КонецПроцедуры
  
Процедура ДобавитьСоответствие(Старое, Новое)
	гТаблицаСоответствий.Добавить();
	гТаблицаСоответствий.OLD = Старое;
	гТаблицаСоответствий.NEW = Новое;
	гТаблицаСоответствий.Записать();
КонецПроцедуры

Функция НайтиСоответствие(Старое, Новое, Вид)
	Если Старое = "" Тогда                  
		Новое = ПолучитьПустоеЗначение("Справочник"+?(Вид = "", "", "."+Вид));
		Возврат 1;
	КонецЕсли;
	Если ТипЗначения(Старое) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	гТаблицаСоответствий.Ключ.OLD = Старое;
	Если гТаблицаСоответствий.НайтиПоКлючу(0) = 1 Тогда
		Новое = ЗначениеИзСтрокиВнутр(гТаблицаСоответствий.NEW);
		Возврат 1;
	КонецЕсли;                                                  
	Возврат 0;
КонецФункции
                   
Функция ВСтрокуВнутр(Значение, МД = 0)
	Если ПустоеЗначение(Значение) = 1 Тогда
		Возврат "";
	Иначе 
		Если МД = 0 Тогда
			Возврат ЗначениеВСтрокуВнутр(Значение);
		ИначеЕсли (МД.Тип = "Справочник") И (МД.Вид = "") Тогда
			Возврат ЗначениеВСтрокуВнутр(Значение.ТекущийЭлемент());
		Иначе
			Возврат ЗначениеВСтрокуВнутр(Значение);
		КонецЕсли;
	КонецЕсли;	
КонецФункции		

Функция ОбработкаВыгрузкиРеквизита(СпрМД, РеквизитМД, Элемент, СпЗначений)
	Возврат 0;
КонецФункции

Функция ОбработкаВыгрузкиЭлемента(СпрМД, Элемент, Стр)
	Возврат 0;
КонецФункции

Функция ОбработкаЗагрузкиРеквизита(СпрМД, РеквизитМД, Спр, СпЗначений)
	Возврат 0;
КонецФункции

Функция ОбработкаЗагрузкиЭлемента(СпрМД, Спр, Стр, Режим)
	Возврат 0;
КонецФункции

Функция ПолучитьКаталог(ВыбФайл)
	СтрКаталог = СокрЛП(ВыбФайл);
	ИсхСтр = СокрЛП(ВыбФайл);
	НовыйКаталог = "";
	Если СтрЧислоВхождений(ИсхСтр, ".") = 0 Тогда
		Возврат ИсхСтр;
	КонецЕсли;
	Если СтрЧислоВхождений(СтрКаталог, "\") > 0 Тогда
		Поз = Найти(СтрКаталог, "\");
		Пока Поз > 0 Цикл
		   СтрКаталог = Прав(СтрКаталог, СтрДлина(СтрКаталог)-Поз);
		   Поз2 = Найти(ИсхСтр, СтрКаталог);
		   НовыйКаталог = Лев(ИсхСтр, Поз2-1);
		   Поз = Найти(СтрКаталог, "\");
		КонецЦикла;
	КонецЕсли;
	Возврат НовыйКаталог;
КонецФункции

Функция ВыборФайла(ВыбФайл, СтрЗаголовок, СтрПриглашение)
	Перем ПредстСпр;
	НовыйФайл = "";
	НовыйКаталог = ПолучитьКаталог(ВыбФайл); 
	Если НовыйКаталог = "" Тогда
		НовыйКаталог = ФС.ТекКаталог()
	КонецЕсли;
	Если ФС.ВыбратьФайл(0, НовыйФайл, НовыйКаталог, СтрЗаголовок, СтрПриглашение+"(*.txt)|*.txt|Все файлы(*.*)|*.*", "txt") = 1 Тогда
		ВыбФайл = НовыйКаталог+НовыйФайл;
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции

Функция ПолучитьИмяФайла(ВыбФайл, Имя)
	Имя = "";
	ТекФайл = СокрЛП(ВыбФайл);
	Если ФС.СуществуетФайл(ВыбФайл) = 0 Тогда 
		Если СтрЧислоВхождений(ТекФайл, ".") = 0 Тогда
			ТекФайл = ТекФайл+".txt";
		КонецЕсли;
	КонецЕсли;
	Имя = ТекФайл;
	Возврат 1;
КонецФункции

Процедура ОчиститьЗагружСпр()
	гТабЗагружСпр.УдалитьСтроки();
	ТабСправочники.УдалитьСтроки();
КонецПроцедуры

Процедура ЗаполнитьТаблицу()
	ТабСправочники.УдалитьСтроки();
	Для Инд=1 По гТабЗагружСпр.КоличествоСтрок() Цикл 
		ТабСправочники.НоваяСтрока();
		ТабСправочники.ИДЗагруж = гТабЗагружСпр.ПолучитьЗначение(Инд, "Идентификатор"); 
		ТабСправочники.ПредстЗагруж = гТабЗагружСпр.ПолучитьЗначение(Инд, "Заголовок").Получить("Представление"); 
	КонецЦикла;
КонецПроцедуры

Функция ЗаполнитьЗагружСтруктуру()
	СпЗаголовок = СоздатьОбъект("СписокЗначений");
	гТабЗагружСпр.УдалитьСтроки();
	Если (СокрЛП(гПолучТекст.ПолучитьСтроку(гПозВерсии)) <> гВерсия) Тогда 
		Предупреждение("Внимание! Версии формата файла загрузки и выгрузки не совпадают.");
		ОчиститьЗагружСпр();
		Возврат 0;
	КонецЕсли;
	Стр = "";
	ПозСпр = 0;
	ФлНеЗагружать = 0;
	Для Инд=2 По гПолучТекст.КоличествоСтрок() Цикл
		Стр = гПолучТекст.ПолучитьСтроку(Инд);
		Если Лев(Стр, 10) = "Справочник" Тогда
			ПозСпр = Инд;
			ОтносПоз = 0;
			ФлНеЗагружать = 0;
			СпрИД = Сред(Стр, 12);
			гТабЗагружСпр.НоваяСтрока();
			гТабЗагружСпр.СмещениеЗначений = 0;
			гТабЗагружСпр.Идентификатор = СпрИД;
			Продолжить;
		Иначе
			ОтносПоз = ОтносПоз+1;
		КонецЕсли;
		Если ФлНеЗагружать = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если ОтносПоз = гПозЗаголовка Тогда
			Загол = ЗначениеИзСтроки(гПолучТекст.ПолучитьСтроку(гПозЗаголовка+ПозСпр));
			Если ТипЗначенияСтр(Загол) <> "СписокЗначений" Тогда
				Сообщить("Внимание! В выбранном файле отсутствует описание справочника!");
				ФлНеЗагружать = 1;
			Иначе
				Если Загол.РазмерСписка() = 0 Тогда
					Сообщить("Внимание! В выбранном файле отсутствует описание справочника!");
					ФлНеЗагружать = 1;
				Иначе	
					гТабЗагружСпр.Заголовок = Загол;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ОтносПоз = гПозРеквизитов Тогда
			ТРекв = ЗначениеИзСтроки(гПолучТекст.ПолучитьСтроку(гПозРеквизитов+ПозСпр));	
			Если ТипЗначенияСтр(ТРекв) <> "ТаблицаЗначений" Тогда
				Сообщить("Внимание! В выбранном файле отсутствует описание реквизитов справочника!");
				ФлНеЗагружать = 1; 
			Иначе
				гТабЗагружСпр.Реквизиты = ТРекв;
			КонецЕсли;
		ИначеЕсли (ОтносПоз > 0) И (гТабЗагружСпр.СмещениеЗначений = 0) Тогда
			гТабЗагружСпр.СмещениеЗначений = Инд;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьТаблицу();
	Возврат гТабЗагружСпр.КоличествоСтрок();	
КонецФункции

Функция ПолучитьСоотвестствиеРекв(ТекИД, ЗагружИД)
	ТабСоотвРекв = СоздатьОбъект("ТаблицаЗначений");
	ТабСоотвРекв.НоваяКолонка("ПредстТек", , 12, , "Рекв.текущ.", 12);
	ТабСоотвРекв.НоваяКолонка("ПредстЗагруж", , 12, , "Рекв.загруж.", 12);
	ТабСоотвРекв.НоваяКолонка("ИДТек"); 
	ТабСоотвРекв.НоваяКолонка("ТипТек");            
	ТабСоотвРекв.НоваяКолонка("ИДЗагруж");  
	ТабСоотвРекв.НоваяКолонка("ИспользованиеТек", "Строка");
	ТабСоотвРекв.НоваяКолонка("Значение");
	Стр = 0;
	ТабРеквЗагруж = ПолучитьПустоеЗначение();
	Если ЗагружИД <> "" Тогда
		Если гТабЗагружСпр.НайтиЗначение(ЗагружИД, Стр, "Идентификатор") = 1 Тогда
			ТабРеквЗагруж = гТабЗагружСпр.ПолучитьЗначение(Стр, "Реквизиты");
		КонецЕсли;                  
	КонецЕсли;
		
	СпрМД = Метаданные.Справочник(ТекИД);
	Для Инд=1 По СпрМД.Реквизит() Цикл
		ТабСоотвРекв.НоваяСтрока();
		ТабСоотвРекв.ПредстТек = СпрМД.Реквизит(Инд).Представление();
		ТабСоотвРекв.ИДТек = СпрМД.Реквизит(Инд).Идентификатор;
		ТабСоотвРекв.ТипТек = СпрМД.Реквизит(Инд).Тип;
		ТабСоотвРекв.ИспользованиеТек = СпрМД.Реквизит(Инд).Использование;
		Если ПустоеЗначение(ТабРеквЗагруж) = 0 Тогда
			НомСтр = 0;
			Поз = ТабРеквЗагруж.НайтиЗначение(СокрЛП(ТабСоотвРекв.ИДТек), НомСтр, "Идентификатор");
			ТекТип = СокрЛП(СпрМД.Реквизит(Инд).Тип);
			Если Поз > 0  Тогда
				ТабСоотвРекв.ИДЗагруж = ТабРеквЗагруж.ПолучитьЗначение(НомСтр, "Идентификатор");
				ТабСоотвРекв.ПредстЗагруж = ТабРеквЗагруж.ПолучитьЗначение(НомСтр, "Представление");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ТабСоотвРекв;
КонецФункции 

Процедура ВклСправочники()
	Для Инд=1  По ТабСправочники.КоличествоСтрок() Цикл 
	   ЗагрИД = ТабСправочники.ПолучитьЗначение(Инд, "ИДЗагруж");
	   СпрМД = Метаданные.Справочник(ЗагрИД);
	   Если СпрМД.Выбран() = 1 Тогда
	   	   ТабСправочники.УстановитьЗначение(Инд, "ИДТек", СпрМД.Идентификатор); 
	   	   ТабСправочники.УстановитьЗначение(Инд, "ПредстТек", СпрМД.Представление()); 
	   	   ТабСправочники.УстановитьЗначение(Инд, "СоответствиеРекв", ПолучитьСоотвестствиеРекв(СпрМД.Идентификатор, ЗагрИД));
	   	   ТабСправочники.УстановитьЗначение(Инд, "ВладелецУмолч", ПолучитьПустоеЗначение("Справочник"));
	   Иначе
	   	   ТабСправочники.УстановитьЗначение(Инд, "ИДТек", "");
	   	   ТабСправочники.УстановитьЗначение(Инд, "ПредстТек", "");
	   	   ТабСправочники.УстановитьЗначение(Инд, "СоответствиеРекв", ПолучитьПустоеЗначение());
	   	   ТабСправочники.УстановитьЗначение(Инд, "ВладелецУмолч", ПолучитьПустоеЗначение("Справочник"));
	   КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьВкл()
	гТабСправочникиВыгрузки.ВыбратьСтроки();
	Пока гТабСправочникиВыгрузки.ПолучитьСтроку() = 1 Цикл
		Инд = СпСправочники.НайтиЗначение(гТабСправочникиВыгрузки.Идентификатор);
		Если Инд = 0 Тогда 
			Продолжить;
		КонецЕсли;
		гТабСправочникиВыгрузки.Вкл = СпСправочники.Пометка(Инд);
	КонецЦикла;
КонецПроцедуры                     

Функция ЗаменитьРС(Значение, Режим)
	Если ТипЗначенияСтр(Значение) = "Строка" Тогда
		Если Режим = 1 Тогда    
			Значение = СтрЗаменить(Значение, РазделительСтрок, "@~#");
		Иначе
			Значение = СтрЗаменить(Значение, "@~#", РазделительСтрок);
		КонецЕсли;
	КонецЕсли;
	Возврат Значение;
КонецФункции
                  
Функция ПреобразоватьКод(Код)
	гТабКод.Код = Код;
	Возврат гТабКод.Код;
КонецФункции

Функция ПолучитьИсторию(История, Элем, РеквизитМД)
	СпПерЗнач = СоздатьОбъект("СписокЗначений");
	История.ИспользоватьОбъект(РеквизитМД.Идентификатор, Элем);
	История.ВыбратьЗначения();
	Пока История.ПолучитьЗначение() = 1 Цикл
		СпПерЗнач.ДобавитьЗначение(ЗаменитьРС(История.Значение, 1), Формат(История.ДатаЗнач, "ДД.ММ.ГГГГ"));
		Если ТипЗначенияСтр(История.Значение) = "Справочник" Тогда
			СпПерЗнач.ДобавитьЗначение(ВСтрокуВнутр(История.Значение, РеквизитМД), "#"+Формат(История.ДатаЗнач, "ДД.ММ.ГГГГ"));
		КонецЕсли;
	КонецЦикла;
	Возврат СпПерЗнач;
КонецФункции	

Функция ПолучитьЗначенияЭлем(СпрМД, СпРеквизиты, Элем, История)
	СпЗнач = СоздатьОбъект("СписокЗначений");
	СпЗнач.ДобавитьЗначение(ВСтрокуВнутр(Элем.ТекущийЭлемент()), "#");
	СпЗнач.ДобавитьЗначение(ЗаменитьРС(Элем.Код, 1), "Код");
	СпЗнач.ДобавитьЗначение(ЗаменитьРС(Элем.Наименование, 1), "Наименование");
	СпЗнач.ДобавитьЗначение(ЗаменитьРС(Элем.Владелец, 1), "Владелец");           
	СпЗнач.ДобавитьЗначение(ВСтрокуВнутр(Элем.Владелец), "#Владелец");
	СпЗнач.ДобавитьЗначение(ВСтрокуВнутр(Элем.Родитель), "#Родитель");
	СпЗнач.ДобавитьЗначение(Элем.Уровень(), "Уровень");
	Если  Элем.ЭтоГруппа() = 1 Тогда
		СпЗнач.ДобавитьЗначение("Группа", "ТипЭлемента");
	Иначе
		СпЗнач.ДобавитьЗначение("Элемент", "ТипЭлемента");		
	КонецЕсли;
	Для Инд=1 По СпРеквизиты.РазмерСписка() Цикл
	    Если СпРеквизиты.Пометка(Инд) = 0 Тогда
	    	Продолжить;
		КонецЕсли;                                           
		РеквизитМД = СпрМД.Реквизит(Инд);
		Если (Элем.ЭтоГруппа() = 0) И (РеквизитМД.Использование <> "ДляГруппы") Тогда
			Если ОбработкаВыгрузкиРеквизита(СпрМД, РеквизитМД, Элем, СпЗнач) = 0 Тогда
				Если РеквизитМД.Периодический = 1 Тогда
					СпЗнач.ДобавитьЗначение(ПолучитьИсторию(История, Элем, РеквизитМД), РеквизитМД.Идентификатор);
				Иначе                       
					ЗначениеРеквизита = Элем.ПолучитьАтрибут(РеквизитМД.Идентификатор);
					СпЗнач.ДобавитьЗначение(ЗаменитьРС(ЗначениеРеквизита, 1), РеквизитМД.Идентификатор);
					Если ТипЗначенияСтр(ЗначениеРеквизита) = "Справочник" Тогда
						СпЗнач.ДобавитьЗначение(ВСтрокуВнутр(ЗначениеРеквизита, РеквизитМД), "#"+РеквизитМД.Идентификатор);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли (Элем.ЭтоГруппа() = 1) И (РеквизитМД.Использование <> "ДляЭлемента") Тогда
			Если ОбработкаВыгрузкиРеквизита(СпрМД, РеквизитМД, Элем, СпЗнач) = 0 Тогда
				Если РеквизитМД.Периодический = 1 Тогда
					СпЗнач.ДобавитьЗначение(ПолучитьИсторию(История, Элем, РеквизитМД), РеквизитМД.Идентификатор);
				Иначе                       
					ЗначениеРеквизита = Элем.ПолучитьАтрибут(РеквизитМД.Идентификатор);
					СпЗнач.ДобавитьЗначение(ЗаменитьРС(ЗначениеРеквизита, 1), РеквизитМД.Идентификатор);
					Если ТипЗначенияСтр(ЗначениеРеквизита) = "Справочник" Тогда
						СпЗнач.ДобавитьЗначение(ВСтрокуВнутр(ЗначениеРеквизита, РеквизитМД), "#"+РеквизитМД.Идентификатор);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат СпЗнач;
КонецФункции

Процедура ВыгрузитьСправочник(СпрМД, СпРеквизиты, СохрТекст, История)
	СохрТекст.ДобавитьСтроку("Справочник "+СпрМД.Идентификатор);

	СпЗаголовок = СоздатьОбъект("СписокЗначений");
	ТабРекв = СоздатьОбъект("ТаблицаЗначений");
	ТабРекв.НоваяКолонка("Идентификатор", "Строка");
	ТабРекв.НоваяКолонка("Представление", "Строка");
	ТабРекв.НоваяКолонка("Тип", "Строка");
	ТабРекв.НоваяКолонка("Использование", "Строка");
	ТабРекв.НоваяКолонка("Периодический", "Число");
   	Состояние("Выгружается справочник '"+СпрМД.Представление()+"'");
	СпЗаголовок.ДобавитьЗначение(СпрМД.Идентификатор, "Идентификатор");
	СпЗаголовок.ДобавитьЗначение(СпрМД.Представление(), "Представление");
	СпЗаголовок.ДобавитьЗначение(СпрМД.КоличествоУровней, "КоличествоУровней");
	ФлВыб = 1;
	Если СпрМД.Владелец.Выбран() = 1  Тогда
		СпЗаголовок.ДобавитьЗначение(СпрМД.Владелец.Идентификатор, "ИДВладельца");
		СпЗаголовок.ДобавитьЗначение(СпрМД.Владелец.Представление(), "ПредставлениеВладельца");
		Если СпрМД.КоличествоУровней = 1 Тогда
			ФлВыб = 0;
		КонецЕсли;
	КонецЕсли;
	СпЗаголовок.ДобавитьЗначение(СпрМД.СерииКодов, "СерииКодов");
	СохрТекст.ДобавитьСтроку(ЗначениеВСтроку(СпЗаголовок));

	Для Инд=1 По СпРеквизиты.РазмерСписка() Цикл
	    Если СпРеквизиты.Пометка(Инд) = 0 Тогда
	    	Продолжить;
		КонецЕсли;
		РеквизитМД = СпрМД.Реквизит(Инд);
		ТабРекв.НоваяСтрока();
		ТабРекв.Идентификатор = РеквизитМД.Идентификатор;
		ТабРекв.Представление = РеквизитМД.Представление();
		ТабРекв.Тип = РеквизитМД.Тип;
		ТабРекв.Использование = РеквизитМД.Использование;
		ТабРекв.Периодический = РеквизитМД.Периодический;
	КонецЦикла;
	СохрТекст.ДобавитьСтроку(ЗначениеВСтроку(ТабРекв));
	Спр = СоздатьОбъект("Справочник." + СпрМД.Идентификатор);
	Спр.ИспользоватьДату(РабочаяДата());
	КоличествоСтрок = 0;
	Если (ФлВыб = 0) Или (СпрМД.Владелец.Выбран() = 0) Тогда
		Спр.ВыбратьЭлементы(ФлВыб);
		Пока Спр.ПолучитьЭлемент() > 0 Цикл
			Если (ВыгружатьУдаленные=0) и (Спр.ПометкаУдаления()=1) Тогда
				Продолжить;
			КонецЕсли;
		    СохрТекст.ДобавитьСтроку(ЗначениеВСтроку(ПолучитьЗначенияЭлем(СпрМД, СпРеквизиты, Спр.ТекущийЭлемент(), История)));
			КоличествоСтрок = КоличествоСтрок+1;
			Если КоличествоСтрок % 50 = 0 Тогда
				Состояние("Справочник '"+СпрМД.Представление()+"': "+КоличествоСтрок);
	    	КонецЕсли;
		КонецЦикла;
	Иначе
		СпрВладелец = СоздатьОбъект("Справочник." + СпрМД.Владелец.Идентификатор);
		СпрВладелец.ВыбратьЭлементы(0);
		Пока СпрВладелец.ПолучитьЭлемент() = 1 Цикл
			Спр.ИспользоватьВладельца(СпрВладелец.ТекущийЭлемент());
			Спр.ВыбратьЭлементы(1);
			Пока Спр.ПолучитьЭлемент() > 0 Цикл
				Если (ВыгружатьУдаленные=0) и (Спр.ПометкаУдаления()=1) Тогда
					Продолжить;
				КонецЕсли; 
				Стр = "";
				Если ОбработкаВыгрузкиЭлемента(СпрМД, Спр, Стр) = 0 Тогда
				    Стр = ЗначениеВСтроку(ПолучитьЗначенияЭлем(СпрМД, СпРеквизиты, Спр.ТекущийЭлемент(), История));
				КонецЕсли;
				СохрТекст.ДобавитьСтроку(Стр);
				КоличествоСтрок = КоличествоСтрок+1;
				Если КоличествоСтрок % 50 = 0 Тогда
					Состояние("Справочник '"+СпрМД.Представление()+"': "+КоличествоСтрок);
		    	КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Сообщить("Справочник '"+СпрМД.Представление()+"': выгружено "+КоличествоСтрок+" элементов");
КонецПроцедуры

Процедура Выгрузить()
	Если СокрЛП(ВыбФайлВыгрузки) = "" Тогда
		Предупреждение("Внимание! Не выбран файл для выгрузки!");
		Возврат;
	КонецЕсли;
	гРежимВСтрокуВнутр = 1;
	ТекФайл = СокрЛП(ВыбФайлВыгрузки); 
	Если СтрЧислоВхождений(ТекФайл, ".") = 0 Тогда
		ТекФайл = ТекФайл+".txt";
	КонецЕсли;		
	Если ФС.СуществуетФайл(СокрЛП(ТекФайл)) = 1 Тогда
		Если Вопрос("Файл с заданным именем уже существует! Перезаписать файл?", 4) = 7 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;     
	
	ЗаполнитьВкл();
	СохрТекст = СоздатьОбъект("Текст");
	История = СоздатьОбъект("Периодический");
	СохрТекст.ДобавитьСтроку(гВерсия);
	гТабСправочникиВыгрузки.ВыбратьСтроки();
	Пока гТабСправочникиВыгрузки.ПолучитьСтроку() = 1 Цикл
		Если гТабСправочникиВыгрузки.Вкл = 0 Тогда
            Продолжить;
		КонецЕсли;
		ВыгрузитьСправочник(Метаданные.Справочник(гТабСправочникиВыгрузки.Идентификатор), 
		                    гТабСправочникиВыгрузки.Реквизиты, СохрТекст, История);	
	КонецЦикла;
	СохрТекст.Записать(ТекФайл);
	Сообщить("Выгрузка элементов справочника завершена");
КонецПроцедуры

Процедура ПолучитьТип(Значение, Тип, Длина, Точность)
	Длина = 0;
	Точность = 0;
	Тип = ТипЗначенияСтр(Значение);
	Если (Тип = "Строка") Или (Тип = "Число") Тогда
		Стр = Строка(Значение);
		Длина = Мин(20, СтрДлина(Стр));
		Если Тип = 1 Тогда
			Точность = Найти(Стр, ".");
			Если Точность <> 0 Тогда
				Точность = Длина-Точность;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли (Тип = "Справочник") Или (Тип = "Документ") Или (Тип = "Счет") Тогда
		Если Значение.Выбран() = 1 Тогда
			Тип = Тип+"."+Значение.Вид();
		КонецЕсли;
	ИначеЕсли Тип = "Перечисление" Тогда
		Тип = Тип+"."+Значение.Вид();
	КонецЕсли;
КонецПроцедуры

Процедура ПрисвоитьПериодЗначение(История, Спр, СпЗнач, ТекИД, РеквизитМД)
	Перем СтрДата, Стр, Значение;                                   
	Перем Тип, Длина, Точность;

	Если РеквизитМД.Периодический = 1 Тогда
		Инд = 1;
		Пока Инд <= СпЗнач.РазмерСписка() Цикл
			Значение = СпЗнач.ПолучитьЗначение(Инд, СтрДата);
			Если Инд < СпЗнач.РазмерСписка() Тогда
				Зн = СпЗнач.ПолучитьЗначение(Инд+1, Стр);
				Если Лев(Стр, 1) = "#" Тогда
					Если НайтиСоответствие(Зн, Зн, РеквизитМД.Вид) = 1 Тогда
						Значение = Зн;
					КонецЕсли;
					Инд = Инд+1;
				КонецЕсли;
			КонецЕсли;
			История.ИспользоватьОбъект(ТекИД, Спр);
			Если РеквизитМД.Тип = "Неопределенный" Тогда
				ПолучитьТип(Значение, Тип, Длина, Точность);
				История.НазначитьТип(Тип, Длина, Точность);
			КонецЕсли;
			История.Значение = ЗаменитьРС(Значение, 0); 
			История.ДатаЗнач = Дата(СтрДата); 
			Попытка 	  	   	   	
				История.Записать();
			Исключение
				Сообщить(ОписаниеОшибки()+" значение для "+Спр.Наименование+" на дату "+СтрДата+"не загружено");
			КонецПопытки;
			Инд = Инд+1;
		КонецЦикла;
	Иначе     
		Инд = СпЗнач.РазмерСписка();
		Если Инд > 0 Тогда
			Значение = СпЗнач.ПолучитьЗначение(Инд, Стр);
			Если Лев(Стр, 1) = "#" Тогда
				Если НайтиСоответствие(Значение, Значение, РеквизитМД.Вид) = 0 Тогда
					Значение = СпЗнач.ПолучитьЗначение(Инд-1);
				КонецЕсли;
			КонецЕсли;
			Если РеквизитМД.Тип = "Неопределенный" Тогда
				ПолучитьТип(Значение, Тип, Длина, Точность);
				Спр.НазначитьТип(ТекИД, Тип, Длина, Точность);
			КонецЕсли;
			Спр.УстановитьАтрибут(ТекИД, ЗаменитьРС(Значение, 0));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СоздатьЭлемент(СпЗнач, Спр, ФлГруппы, ФлПоиска, СпрПоиска, ФлКонтрУник, СпрМД, ВладелецУмолч)
	Перем Родитель, Владелец;
	
	Если СпЗнач.Получить("ТипЭлемента") = "Элемент" Тогда
	   	ФлГруппы = 0;
	Иначе
	   	ФлГруппы = 1;
	КонецЕсли;            
	   
	Код = ПреобразоватьКод(ЗаменитьРС(СпЗнач.Получить("Код"), 0)); 
	Наименование = ЗаменитьРС(СпЗнач.Получить("Наименование"), 0);
	
	Если СпрМД.КоличествоУровней > 1 Тогда
		Если НайтиСоответствие(СпЗнач.Получить("#Родитель"), Родитель, СпрМД.Идентификатор) = 0 Тогда
			Возврат 0;
		КонецЕсли;
		Если (Родитель.Выбран() = 1) И (Родитель.ЭтоГруппа() = 0) Тогда
		     Родитель = Родитель.Родитель;
		КонецЕсли;
		Если (Родитель.Выбран() = 1) И (ФлГруппы = 1) Тогда
			Если Родитель.Уровень() = СпрМД.КоличествоУровней-1 Тогда
				Родитель = Родитель.Родитель;
			КонецЕсли;
		КонецЕсли;                 
		Спр.ИспользоватьРодителя(Родитель);
	ИначеЕсли ФлГруппы = 1 Тогда
		Сообщить("Нельзя создать группу! Элемент '"+Наименование+"' не загружен!");
		Возврат 0;
	КонецЕсли;
	                                
	Если СпрМД.Владелец.Выбран() = 1 Тогда
		Если НайтиСоответствие(СпЗнач.Получить("#Владелец"), Владелец, СпрМД.Владелец.Идентификатор) = 0 Тогда
			Владелец = ЗаменитьРС(СпЗнач.Получить("Владелец"), 0);
		КонецЕсли;
		Если ПустоеЗначение(Владелец) = 1 Тогда
			Если ТипЗначенияСтр(ВладелецУмолч) = "Справочник" Тогда
				Если ВладелецУмолч.Вид() = СпрМД.Владелец.Идентификатор Тогда
					Владелец = ВладелецУмолч;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ПустоеЗначение(Владелец) = 1 Тогда
			Сообщить("Не найден элемент-хозяин! Элемент '"+Наименование+"' не загружен!");
			Возврат 0;
		КонецЕсли;
		Спр.ИспользоватьВладельца(Владелец);
	КонецЕсли;
	
	Если СинхронизироватьПоКоду = 1 Тогда
		Если СпрМД.КоличествоУровней > 1 Тогда
			Если Родитель.ЭтоГруппа() = 1 Тогда 
				СпрПоиска.ИспользоватьРодителя(Родитель);
			Иначе
				СпрПоиска.ИспользоватьРодителя("");
			КонецЕсли;
		КонецЕсли;
		Если СпрМД.Владелец.Выбран() = 1 Тогда
			Если ПустоеЗначение(Владелец) = 0 Тогда
				СпрПоиска.ИспользоватьВладельца(СпЗнач.Получить("Владелец"));
			КонецЕсли;
		КонецЕсли;
		Если (СпрПоиска.НайтиПоКоду(Код, ФлПоиска) = 1) Тогда
			Если (ФлИспр = 1) И (ФлКонтрУник = 1) Тогда
				Сообщить("Код "+Код+" не уникальный! Элемент '"+Наименование+"' не загружен!");
				Возврат 0;
			ИначеЕсли (ФлИспр = 2) И (ФлГруппы = СпрПоиска.ЭтоГруппа()) Тогда
				Спр.НайтиЭлемент(СпрПоиска);
			ИначеЕсли (ФлИспр = 3) Или ((ФлКонтрУник = 0) И (ФлИспр = 1))  Или ((ФлИспр = 2) И (ФлГруппы <> СпрПоиска.ЭтоГруппа())) Тогда
				Если ФлГруппы = 0 Тогда
		   			Спр.Новый();
				Иначе
		   			Спр.НоваяГруппа();
				КонецЕсли;  
				Если ФлКонтрУник = 0 Тогда
					Спр.Код = Код;	
				ИначеЕсли СпрМД.АвтоНумерация = 1 Тогда
					Сообщить("Код "+Код+" не уникальный! Элемент '"+Наименование+"' не загружен!");
					Возврат 0;
				КонецЕсли;
			КонецЕсли;
			Новый = 0;
		Иначе
			Если ФлГруппы = 0 Тогда
		   		Спр.Новый();
			Иначе
		   		Спр.НоваяГруппа();
			КонецЕсли;
			Спр.Код = Код;	
		КонецЕсли;
	Иначе
		Если ФлГруппы = 0 Тогда
	   		Спр.Новый();
		Иначе
	   		Спр.НоваяГруппа();
		КонецЕсли;
	   	Если СпрМД.АвтоНумерация = 1 Тогда
	   		Спр.Код = Код;
	   	КонецЕсли;
	КонецЕсли;
	
	Спр.Наименование = Наименование;
	Возврат 1;
КонецФункции

Функция ПрисвоитьЗначения(СпЗнач, Спр, ТабРеквизиты, СпрМД, История, Режим) 
	Перем ТекЗнач;                                
	Перем Тип, Длина, Точность;
	Если ТипЗначенияСтр(ТабРеквизиты) <> "ТаблицаЗначений" Тогда
		Возврат 1;
	КонецЕсли;
	
	ФлГруппы = Спр.ЭтоГруппа();
	ТабРеквизиты.ВыбратьСтроки();
	Пока ТабРеквизиты.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(ТабРеквизиты.ИДЗагруж) = 1 Тогда
			Продолжить;
		КонецЕсли;	
        
		ТекИД = ТабРеквизиты.ИДТек;
		ТекПредст = ТабРеквизиты.ПредстТек;
		Если ((ТабРеквизиты.ИспользованиеТек = "ДляЭлемента") И (ФлГруппы = 1)) Или
			 ((ТабРеквизиты.ИспользованиеТек = "ДляГруппы") И (ФлГруппы = 0)) Тогда
			Продолжить;	
		КонецЕсли;

		РеквизитМД = СпрМД.Реквизит(ТекИД);
		Если ОбработкаЗагрузкиРеквизита(СпрМД, РеквизитМД, Спр, СпЗнач) = 0 Тогда
			ЗагружИД = ТабРеквизиты.ИДЗагруж;
			Если ЗагружИД <> "<значение>" Тогда
				Если НайтиСоответствие(СпЗнач.Получить("#"+ЗагружИД), ТекЗнач, РеквизитМД.Вид) = 0 Тогда
					ТекЗнач = СпЗнач.Получить(ЗагружИД);        
					Если ТипЗначенияСтр(ТекЗнач) <> "СписокЗначений" Тогда
						ТекЗнач = ЗаменитьРС(ТекЗнач, 0);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекЗнач = ТабРеквизиты.Значение;
			КонецЕсли;
			Если ТипЗначенияСтр(ТекЗнач) = "СписокЗначений" Тогда
				Если Режим <> 1 Тогда
					ПрисвоитьПериодЗначение(История, Спр, ТекЗнач, ТекИД, РеквизитМД);
				КонецЕсли;
			Иначе     
				Если Режим <> 2 Тогда
					Если РеквизитМД.Тип = "Неопределенный" Тогда
						ПолучитьТип(ТекЗнач, Тип, Длина, Точность);
						Спр.НазначитьТип(ТекИД, Тип, Длина, Точность);
					КонецЕсли;
					Спр.УстановитьАтрибут(ТекИД, ТекЗнач);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Процедура ОчиститьСправочник(ИДСпр)
	Если ФлОчистка = 1 Тогда
		Возврат;
	КонецЕсли;	
	СпрМД = Метаданные.Справочник(ИДСпр); 
	Спр = СоздатьОбъект("Справочник." + ИДСпр);
	Спр.ИспользоватьДату(РабочаяДата());
	КоличествоСтрок = 0;
	Предст = "Удаление элементов справочника """+СпрМД.Представление()+""":";
	Состояние(Предст);
	Если ФлОчистка = 2 Тогда // Пометить на удаление	
		НачатьТранзакцию();
		Спр.ВыбратьЭлементы(0);
		Пока Спр.ПолучитьЭлемент() = 1 Цикл
			Спр.Удалить(0);
			КоличествоСтрок = КоличествоСтрок+1;
			Если КоличествоСтрок%50 = 0 Тогда
				Состояние(Предст+КоличествоСтрок);
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	ИначеЕсли ФлОчистка = 3 Тогда // Удалить
		НачатьТранзакцию();
		Пока Спр.ВыбратьЭлементы(0) = 1 Цикл
			Спр.ПолучитьЭлемент();
			Спр.Удалить(1);
			КоличествоСтрок = КоличествоСтрок+1;
			Если КоличествоСтрок%50 = 0 Тогда
				Состояние(Предст+КоличествоСтрок);
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

Функция ЗагрузитьЭлемент(СпрМД, Спр, СпрПоиска, История, СпЗнач, ВладелецУмолч, ФлГруппы, ФлПоиска, ФлКонтрУник, ОтложитьЗаписьРеквизитов, ТабСоотвРекв)
	Если ОбработкаЗагрузкиЭлемента(СпрМД, Спр, СпЗнач, 1) = 0 Тогда
		Если СоздатьЭлемент(СпЗнач, Спр, ФлГруппы, ФлПоиска, СпрПоиска, ФлКонтрУник, СпрМД, ВладелецУмолч) = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		Наименование = Спр.Наименование;
		Если ОтложитьЗаписьРеквизитов = 0 Тогда
		    ПрисвоитьЗначения(СпЗнач, Спр, ТабСоотвРекв, СпрМД, История, 1);
		КонецЕсли;

		Попытка
			Спр.Записать();
		Исключение
			Сообщить(ОписаниеОшибки()+" элемент "+Наименование+" не загружен");
			Возврат 0;
		КонецПопытки;      
		
		ДобавитьСоответствие(СпЗнач.Получить("#"), ЗначениеВСтрокуВнутр(Спр.ТекущийЭлемент()));

		Если ОтложитьЗаписьРеквизитов = 0 Тогда
		    ПрисвоитьЗначения(СпЗнач, Спр, ТабСоотвРекв, СпрМД, История, 2);
		КонецЕсли;
	КонецЕсли;       
	Возврат 1;
КонецФункции

Процедура ЗагрузитьЭлементы(История, ИДСпр, ИДЗам, ТабСоотвРекв, ТекСпрПредст, ВладелецУмолч, СпОтложитьЗаписьРеквизитов)
	Перем ФлГруппы;
	Спр = СоздатьОбъект("Справочник." + ИДСпр);
	СпрПоиска = СоздатьОбъект("Справочник." + ИДСпр);
	СпрМД = Метаданные.Справочник(ИДСпр);
	ФлКонтрУник = СпрМД.КонтрольУникальности;
    Если СпрМД.СерииКодов = "ВПределахПодчинения" Тогда
		ФлПоиска = 1;
	Иначе
		ФлПоиска = 0;	
	КонецЕсли;	
	КоличествоСтрок = 0;
	ФлЗамена = 0;
	Если ИДЗам <> ИДСпр Тогда
		ФлЗамена = 1;	
	КонецЕсли;
	Состояние("Создание элементов справочника '"+ТекСпрПредст+"'");

	Стр = 0;
	Если гТабЗагружСпр.НайтиЗначение(ИДЗам, Стр, "Идентификатор") = 0 Тогда
		СпОтложитьЗаписьРеквизитов.ДобавитьЗначение(0);
		Сообщить("Ошибка загрузки справочника "+ТекСпрПредст);
		Возврат;
	КонецЕсли;

	Стр = 0;
	гТабЗагружСпр.НайтиЗначение(ИДЗам, Стр, "Идентификатор");
	НачИнд = гТабЗагружСпр.ПолучитьЗначение(Стр, "СмещениеЗначений");

	гТабКод = СоздатьОбъект("ТаблицаЗначений");
	Если СпрМД.ТипКода = "Числовой" Тогда
		гТабКод.НоваяКолонка("Код", "Число", СпрМД.ДлинаКода);
	Иначе
		гТабКод.НоваяКолонка("Код", "Строка", СпрМД.ДлинаКода);
	КонецЕсли;                                                 
	гТабКод.НоваяСтрока();
	        
	ОтложитьЗаписьРеквизитов = 0;
	Для Инд=1 По СпрМД.Реквизит() Цикл
		РеквизитМД = СпрМД.Реквизит(Инд);
		Если (РеквизитМД.Тип = "Справочник") Или (РеквизитМД.Тип = "Неопределенный") Тогда
			ОтложитьЗаписьРеквизитов = 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	СпОтложитьЗаписьРеквизитов.ДобавитьЗначение(ОтложитьЗаписьРеквизитов);
	                           
	Если НачИнд = 0 Тогда
		СпОтложитьЗаписьРеквизитов.ДобавитьЗначение(0);
		Сообщить("Cправочник '"+ТекСпрПредст+"' не содержит элементов");
		Возврат;
	КонецЕсли;   
	
	НачатьТранзакцию();
	КоличествоСтрок = 0;
    Для Инд=НачИнд  По гПолучТекст.КоличествоСтрок() Цикл
		Стр = гПолучТекст.ПолучитьСтроку(Инд);
		Если Лев(Стр, 10) = "Справочник" Тогда
			Прервать;
		КонецЕсли;
		СпЗнач = ЗначениеИзСтроки(Стр);
		Если ЗагрузитьЭлемент(СпрМД, Спр, СпрПоиска, История, СпЗнач, ВладелецУмолч, ФлГруппы, ФлПоиска, ФлКонтрУник, ОтложитьЗаписьРеквизитов, ТабСоотвРекв) = 1 Тогда
			КоличествоСтрок = КоличествоСтрок+1;
			Если КоличествоСтрок % 50 = 0 Тогда
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				Состояние("Создание элементов справочника '"+ТекСпрПредст+"':"+КоличествоСтрок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();

	Если ОтложитьЗаписьРеквизитов = 0 Тогда
		Сообщить("Справочник '"+ТекСпрПредст+"': загружено "+КоличествоСтрок+" элементов");
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьЗначенияРеквизитов(История, ИДСпр, ИДЗам, ТабСоотвРекв, ТекСпрПредст)
	Перем Значение;
	Спр = СоздатьОбъект("Справочник." + ИДСпр);
	СпрМД = Метаданные.Справочник(ИДСпр);
	Спр.ИспользоватьДату(РабочаяДата());
	КоличествоСтрок = 0;
	Состояние("Загрузка значений реквизитов справочника '"+ТекСпрПредст+"'");
	Стр = 0;
	гТабЗагружСпр.НайтиЗначение(ИДЗам, Стр, "Идентификатор");
	НачИнд = гТабЗагружСпр.ПолучитьЗначение(Стр, "СмещениеЗначений");

	КоличествоСтрок = 0;
	Если НачИнд = 0 Тогда
		Возврат;
	КонецЕсли;            

	НачатьТранзакцию();
    Для Инд=НачИнд  По гПолучТекст.КоличествоСтрок() Цикл
		Стр = гПолучТекст.ПолучитьСтроку(Инд);
		Если Лев(Стр, 10) = "Справочник" Тогда
			Прервать;
		КонецЕсли;
		
		Если ОбработкаЗагрузкиЭлемента(СпрМД, Спр, Стр, 2) = 0 Тогда
			СпЗнач = ЗначениеИзСтроки(Стр);
			Если НайтиСоответствие(СпЗнач.Получить("#"), Значение, СпрМД.Идентификатор) = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если Спр.НайтиЭлемент(Значение) = 0 Тогда
				Продолжить;
			КонецЕсли;
		
			ПрисвоитьЗначения(СпЗнач, Спр, ТабСоотвРекв, СпрМД, История, 0);
			Наименование = Спр.Наименование;
			Попытка
				Спр.Записать();
			Исключение
				Сообщить(ОписаниеОшибки()+" элемент "+Наименование+" не загружен");
				Продолжить;
			КонецПопытки;
		КонецЕсли;

		КоличествоСтрок = КоличествоСтрок+1;
		Если КоличествоСтрок % 50 = 0 Тогда
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
			Состояние("Загрузка значений реквизитов справочника '"+ТекСпрПредст+"':"+КоличествоСтрок);
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	Сообщить("Справочник '"+ТекСпрПредст+"': загружено "+КоличествоСтрок+" элементов");
КонецПроцедуры

Функция ПолучитьИерархСпр()
	Перем Владелец;
	СпИерархии = СоздатьОбъект("СписокЗначений");
	СпИсх = СоздатьОбъект("СписокЗначений");
	Для Инд=1 По ТабСправочники.КоличествоСтрок() Цикл
		ЗначЗагруж = ТабСправочники.ПолучитьЗначение(Инд, "ИДЗагруж");	
		ЗначТек = ТабСправочники.ПолучитьЗначение(Инд, "ИДТек");
		СпрМД = Метаданные.Справочник(ЗначТек);
		Если СпрМД.Выбран() = 0 Тогда
			Продолжить;
		КонецЕсли;
			
		Если СпрМД.Владелец.Выбран() = 0 Тогда
			СпИсх.ДобавитьЗначение(ЗначТек, "");
		Иначе
			СпИсх.ДобавитьЗначение(ЗначТек, СпрМД.Владелец.Идентификатор);
		КонецЕсли;
	КонецЦикла;  
	
	Пока СпИсх.РазмерСписка() > 0 Цикл
		Инд = 1;
		Пока Инд <= СпИсх.РазмерСписка() Цикл
			ЗначТек = СпИсх.ПолучитьЗначение(Инд, Владелец);
			Если (Владелец = "") Или (СпИсх.НайтиЗначение(Владелец) = 0) Или (СпИерархии.НайтиЗначение(Владелец) = 1) Тогда
			    СпИерархии.ДобавитьЗначение(ЗначТек, Владелец);
				СпИсх.УдалитьЗначение(Инд);
			Иначе
				Инд = Инд+1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СпИерархии;
КонецФункции

Процедура Загрузить()
	Перем ПредстСпр; 
	История = СоздатьОбъект("Периодический");	
	Если гТабЗагружСпр.КоличествоСтрок() = 0 Тогда
		Предупреждение("Внимание! Нет данных о загружаемых справочниках!");
		Возврат;
	КонецЕсли;
	Если ФлОчистка = 3 Тогда
		Если Вопрос("Все имеющиеся данные из справочников будут удалены. Продолжить загрузку?", 4) = 7 Тогда
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	СоздатьТаблицуСоответствий();
	СпОтложитьЗаписьРеквизитов = СоздатьОбъект("СписокЗначений");
	СпСправ = ПолучитьИерархСпр();
	Для Инд=1 По СпСправ.РазмерСписка() Цикл
		ИДТек = СпСправ.ПолучитьЗначение(Инд);
		Стр = 0;
		ТабСправочники.НайтиЗначение(ИДТек, Стр, "ИДТек");
		ИДЗагруж = ТабСправочники.ПолучитьЗначение(Стр, "ИДЗагруж");
		Если ПустоеЗначение(ИДЗагруж) = 1 Тогда
			Продолжить;
		КонецЕсли;
	    ОчиститьСправочник(ИДТек);
		ЗагрузитьЭлементы(История, ИДТек, ИДЗагруж, ТабСправочники.ПолучитьЗначение(Стр, "СоответствиеРекв"), 
			ТабСправочники.ПолучитьЗначение(Стр, "ПредстТек"), ТабСправочники.ПолучитьЗначение(Стр, "ВладелецУмолч"), 
			СпОтложитьЗаписьРеквизитов);
	КонецЦикла;
		
	Для Инд=1 По СпСправ.РазмерСписка() Цикл
		Если СпОтложитьЗаписьРеквизитов.ПолучитьЗначение(Инд) = 0 Тогда
			Продолжить;
		КонецЕсли;
		ИДТек = СпСправ.ПолучитьЗначение(Инд);
		Стр = 0;
		ТабСправочники.НайтиЗначение(ИДТек, Стр, "ИДТек");
		ИДЗагруж = ТабСправочники.ПолучитьЗначение(Стр, "ИДЗагруж");
		Если ПустоеЗначение(ИДЗагруж) = 1 Тогда
			Продолжить;
		КонецЕсли;
		ЗагрузитьЗначенияРеквизитов(История, ИДТек, ИДЗагруж, ТабСправочники.ПолучитьЗначение(Стр, "СоответствиеРекв"), 
			ТабСправочники.ПолучитьЗначение(Стр, "ПредстТек"));
	КонецЦикла;

	ЗакрытьТаблицуСоответствий();

	Сообщить("Загрузка элементов справочника завершена");
КонецПроцедуры

Функция АнализФайлаЗагрузки()
	Перем Имя;
	Если СокрЛП(ВыбФайлЗагрузки) = "" Тогда
		ОчиститьЗагружСпр();
		Возврат 0;
	КонецЕсли;             
	Если ПолучитьИмяФайла(ВыбФайлЗагрузки, Имя) = 0 Тогда
	    ОчиститьЗагружСпр();
		Возврат 0;
	Иначе
		Попытка
			гПолучТекст.Открыть(СокрЛП(Имя));
			ЗаполнитьЗагружСтруктуру();
		Исключение   
			Сообщить("Ошибка открытия файла "+Имя+"!");
			Возврат 0;
		КонецПопытки;
	КонецЕсли;
	Возврат 1;
КонецФункции

Процедура ВыбратьРеквизиты(НомТекСтр)
	Перем СтрПуть, СтрИмя;
	Если НомТекСтр <= 0 Тогда
		Возврат;
	КонецЕсли;
	СпРекв = СоздатьОбъект("СписокЗначений");
	ИДСпрТек = ТабСправочники.ПолучитьЗначение(НомТекСтр, "ИДТек");
	ИДСпрЗагр = ТабСправочники.ПолучитьЗначение(НомТекСтр, "ИДЗагруж");
	Если ИДСпрЗагр = "" Тогда
		Возврат;
	КонецЕсли;
	ТабРекв = ТабСправочники.ПолучитьЗначение(НомТекСтр, "СоответствиеРекв");
	СпРекв.ДобавитьЗначение("Загрузка", "Режим");
	СпРекв.ДобавитьЗначение(ИДСпрТек, "Идентификатор"); 
	СпРекв.ДобавитьЗначение(ТабРекв, "ТабСоответствий");
	Стр = 0;
	Если гТабЗагружСпр.НайтиЗначение(ИДСпрЗагр, Стр, "Идентификатор") = 1 Тогда
		СпРекв.ДобавитьЗначение(гТабЗагружСпр.ПолучитьЗначение(Стр, "Реквизиты"), "ТабЗагружРеквизитов");
		СпРекв.ДобавитьЗначение(гТабЗагружСпр.ПолучитьЗначение(Стр, "Заголовок"), "ЗаголовокЗагружСпр");
		СпРекв.ДобавитьЗначение(ТабСправочники.ПолучитьЗначение(НомТекСтр, "ВладелецУмолч"), "ВладелецУмолч");
		ПеремКонт = СпРекв;
    	ОткрытьФормуМодально("Обработка.PAR_ATTR", ПеремКонт) ;
		Если ПустоеЗначение(ПеремКонт) = 1 Тогда
			Возврат;
		КонецЕсли; 
		ТабСоотв = ПеремКонт.Получить("ТабСоответствий");
		ТабСправочники.УстановитьЗначение(НомТекСтр, "ВладелецУмолч", ПеремКонт.Получить("ВладелецУмолч"));
		ТабСправочники.УстановитьЗначение(НомТекСтр, "СоответствиеРекв", ТабСоотв);			
	КонецЕсли;
КонецПроцедуры

Процедура ВыбратьСправочник(НомТекСтр)
	Перем ВыбПоз, СтрПредст, ВыбЗн;
	Если НомТекСтр > ТабСправочники.КоличествоСтрок() Тогда
		НомТекСтр = 0;
	КонецЕсли; 
    СпЗнач = СоздатьОбъект("СписокЗначений");
	Для Инд=1 По СпСправочники.РазмерСписка() Цикл
		СтрПредст = "";
		Значен = СпСправочники.ПолучитьЗначение(Инд, СтрПредст);
		СпЗнач.ДобавитьЗначение(Значен, СтрПредст);	
	КонецЦикла;
	
	СпЗнач.ВставитьЗначение(1, "<не загружать>");     
	Если НомТекСтр > 0 Тогда
		Если ТабСправочники.ТекущаяКолонка() = "ПредстТек" Тогда
			ВыбПоз = 0;
			Если СпЗнач.ВыбратьЗначение(ВыбЗн, , ВыбПоз, , 2) = 1 Тогда
				Если (ВыбПоз > 0) И (ВыбПоз <= СпЗнач.РазмерСписка()) Тогда
					Если СокрЛП(ВыбЗн) = "<не загружать>" Тогда
						ТабСправочники.ИДТек = "";
						ТабСправочники.ПредстТек = "";
						Если ПустоеЗначение(ТабСправочники.СоответствиеРекв) = 0 Тогда
							ТабСправочники.СоответствиеРекв.УдалитьСтроки();
						КонецЕсли;
						Возврат;
					КонецЕсли;
					Поз2 = 0;
		            Если ТабСправочники.НайтиЗначение(ВыбЗн, Поз2, "ИДТек") = 1 Тогда
		            	Возврат;	
		            КонецЕсли;
					Значен = СпЗнач.ПолучитьЗначение(ВыбПоз, СтрПредст);
					ТабСправочники.ИДТек = Значен;
					ТабСправочники.ПредстТек = СтрПредст;
					ТабСправочники.СоответствиеРекв = ПолучитьСоотвестствиеРекв(ТабСправочники.ИДТек, Значен);
				   	ТабСправочники.ВладелецУмолч = ПолучитьПустоеЗначение();
				КонецЕсли;
			КонецЕсли;
		Иначе
			ВыбратьРеквизиты(НомТекСтр);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 
 
Процедура УправлениеЗакладками()
	Форма.Закладки.ДобавитьЗначение("Выгрузка", "Выгрузка");
	Форма.Закладки.ДобавитьЗначение("Загрузка", "Загрузка");
	Форма.Закладки.ДобавитьЗначение("Режим", "Параметры загрузки");
	Форма.Закладки.ДобавитьЗначение("Настройки", "Настройки");
	Форма.ИспользоватьСлой("Основной, Выгрузка", 2);
	ТекЗакладка = "Выгрузка";
КонецПроцедуры

Процедура СохранитьПараметрыФормы()
	Перем Путь, ИмяФайла;
	Перем СписВар;
	РасположениеФайла(Путь, ИмяФайла);

	ПараметрыУстановки = СоздатьОбъект("СписокЗначений");
	СохрТекст = СоздатьОбъект("Текст");
	ПараметрыУстановки.ДобавитьЗначение(гСпВариантовЗагрузки, "СпВариантовЗагрузки");
	ПараметрыУстановки.ДобавитьЗначение(гСпВариантовВыгрузки, "СпВариантовВыгрузки");

	СохрТекст.ДобавитьСтроку(ЗначениеВСтрокуВнутр(ПараметрыУстановки));
	ИмяФайла = СокрЛП(Лев(ИмяФайла, СтрДлина(ИмяФайла)-4))+".prm";
	СохрТекст.Записать(СокрЛП(КаталогПользователя())+ИмяФайла);
КонецПроцедуры

Процедура ВосстановитьПараметрыФормы()
	Перем Путь, ИмяФайла;
    РасположениеФайла(Путь, ИмяФайла);
	ИмяФайла = СокрЛП(Лев(ИмяФайла, СтрДлина(ИмяФайла)-4))+".prm";
	Если ФС.СуществуетФайл(КаталогПользователя()+ИмяФайла) = 0 Тогда
	    Возврат;
	КонецЕсли;
	СохрТекст = СоздатьОбъект("Текст");
	СохрТекст.Открыть(КаталогПользователя()+ИмяФайла);
	Стр = "";
	Для Инд=1 По СохрТекст.КоличествоСтрок() Цикл
	   Стр = Стр+СохрТекст.ПолучитьСтроку(Инд);
	КонецЦикла;
	ПараметрыУстановки = ЗначениеИзСтрокиВнутр(Стр);
    
	Сп = ПараметрыУстановки.Получить("СпВариантовЗагрузки");
	Если ТипЗначенияСтр(Сп) = "СписокЗначений" Тогда
		Сп.Выгрузить(гСпВариантовЗагрузки);
	КонецЕсли;
	Сп = ПараметрыУстановки.Получить("СпВариантовВыгрузки");
	Если ТипЗначенияСтр(Сп) = "СписокЗначений" Тогда
		Сп.Выгрузить(гСпВариантовВыгрузки);
	КонецЕсли;
	Форма.Обновить(1);
КонецПроцедуры

Процедура СоздатьВариантЗагрузки(ПараметрыУстановки)
	ПараметрыУстановки.УдалитьВсе();
	СписСпр = СоздатьОбъект("ТаблицаЗначений");
	ПараметрыУстановки.ДобавитьЗначение(ВыбФайлВыгрузки, "ФайлВыгрузки");
	ПараметрыУстановки.ДобавитьЗначение(ВыбФайлЗагрузки, "ФайлЗагрузки");
	ТабСправочники.Выгрузить(СписСпр);
	ПараметрыУстановки.ДобавитьЗначение(СписСпр, "ТабСправочники");
	ПараметрыУстановки.ДобавитьЗначение(ФлИспр, "ФлИспр");
	ПараметрыУстановки.ДобавитьЗначение(ФлОчистка, "ФлОчистка");
	ПараметрыУстановки.ДобавитьЗначение(СинхронизироватьПоКоду, "СинхронизироватьПоКоду");
КонецПроцедуры

Процедура ПриВыбореСинхронизироватьПоКоду() Далее
Процедура ВосстановитьВариантЗагрузки(НаимВарианта)
	Перем Стр;
	СпПарам = гСпВариантовЗагрузки.Получить(НаимВарианта);
	Если ПустоеЗначение(СпПарам) = 1 Тогда
	   Возврат;
	КонецЕсли;
	ТекСпр = СпПарам.Получить("Справочник");
	ВыбФайлВыгрузки = СпПарам.Получить("ФайлВыгрузки");
	ВыбФайлЗагрузки = СпПарам.Получить("ФайлЗагрузки");
	Т = СпПарам.Получить("ТабСправочники");
	ФлИспр = СпПарам.Получить("ФлИспр");
	ФлОчистка = СпПарам.Получить("ФлОчистка");
	СинхронизироватьПоКоду = СпПарам.Получить("СинхронизироватьПоКоду");
	ПриВыбореСинхронизироватьПоКоду();

	АнализФайлаЗагрузки();
	ТабСправочники.ВыбратьСтроки();
	Пока ТабСправочники.ПолучитьСтроку() = 1 Цикл
		Стр = 0;
		Если Т.НайтиЗначение(ТабСправочники.ИДЗагруж, Стр, "ИДЗагруж") = 0 Тогда
			Продолжить;
		КонецЕсли;
		Т.ПолучитьСтрокуПоНомеру(Стр);
		СпрМД = Метаданные.Справочник(Т.ИДТек);
		Если СпрМД.Выбран() = 0 Тогда
			Продолжить;
		КонецЕсли;   
		Если ПустоеЗначение(ТабСправочники.ИДТек) = 0 Тогда
			Стр1 = 0;
			Если Т.НайтиЗначение(ТабСправочники.ИДТек, Стр1, "ИДТек") = 1 Тогда
				Если Стр1 <> Стр Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТСР = Т.СоответствиеРекв;
		Если Т.ИДТек <> ТабСправочники.ИДТек Тогда
			ТабСправочники.ИДТек = Т.ИДТек;
			ТабСправочники.ПредстТек = Т.ПредстТек;
			ТабСправочники.ВладелецУмолч = ПустоеЗначение("Справочник");
		КонецЕсли;                                 
		    
		Если ТипЗначенияСтр(ТСР) = "ТаблицаЗначений" Тогда
			ТабСправочники.СоответствиеРекв = ПолучитьСоотвестствиеРекв(Т.ИДТек, "");
			ТабСоотвРекв = ТабСправочники.СоответствиеРекв;
			     
			ТабСоотвРекв.ВыбратьСтроки();
			Пока ТабСоотвРекв.ПолучитьСтроку() = 1 Цикл
				Стр1 = 0;
				Если ТСР.НайтиЗначение(ТабСоотвРекв.ИДТек, Стр1, "ИДТек") = 0 Тогда
					Продолжить;
				КонецЕсли;                  
				
				ТСР.ПолучитьСтрокуПоНомеру(Стр1);                      
				
				Если ТСР.ИДЗагруж <> "<значение>" Тогда
					Стр1 = 0;
					Если гТабЗагружСпр.НайтиЗначение(ТабСправочники.ИДЗагруж, Стр1, "Идентификатор") = 0 Тогда
						Продолжить;
					КонецЕсли;         
					Реквизиты = гТабЗагружСпр.ПолучитьЗначение(Стр1, "Реквизиты");
					Стр1 = 0;
					Если Реквизиты.НайтиЗначение(ТСР.ИДЗагруж, Стр1, "Идентификатор") = 0 Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				ТабСоотвРекв.ПредстЗагруж = ТСР.ПредстЗагруж;
				ТабСоотвРекв.ИДЗагруж = ТСР.ИДЗагруж; 
				ТабСоотвРекв.Значение = ТСР.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписьВариантаЗагрузки()
	Если СокрЛП(ВыбВариантЗагрузки) = "" Тогда
	    Предупреждение("Внимание! Не введено наименование настройки!");
		Возврат;
	КонецЕсли;
	СпПарам = гСпВариантовЗагрузки.Получить(СокрЛП(ВыбВариантЗагрузки));
	Если ПустоеЗначение(СпПарам) = 1 Тогда
	   СпПарам = СоздатьОбъект("СписокЗначений");
	   СоздатьВариантЗагрузки(СпПарам);
	   гСпВариантовЗагрузки.ДобавитьЗначение(СпПарам, СокрЛП(ВыбВариантЗагрузки));
	Иначе
	   СоздатьВариантЗагрузки(СпПарам);
	   гСпВариантовЗагрузки.Установить(СокрЛП(ВыбВариантЗагрузки), СпПарам);
	КонецЕсли;
    гСпВариантовЗагрузки.ТекущаяСтрока(гСпВариантовЗагрузки.НайтиЗначение(СпПарам));
	СохранитьПараметрыФормы();
КонецПроцедуры

Процедура УдалитьВариантЗагрузки()
	ТекСпис = гСпВариантовЗагрузки.Получить(СокрЛП(ВыбВариантЗагрузки));
	Ном = гСпВариантовЗагрузки.НайтиЗначение(ТекСпис);
	ВыбВариантЗагрузки = "";
	Если Ном > 0 Тогда
		гСпВариантовЗагрузки.УдалитьЗначение(Ном);
		СохранитьПараметрыФормы();
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьВариантВыгрузки(ПараметрыУстановки)
	Перем Т;
	
	ПараметрыУстановки.УдалитьВсе();
	Если СпСправочники.ТекущаяСтрока() > 0 Тогда
		ПараметрыУстановки.ДобавитьЗначение(Метаданные.Справочник(СпСправочники.ТекущаяСтрока()).Идентификатор, "Справочник");
	КонецЕсли;
	ПараметрыУстановки.ДобавитьЗначение(ВыбФайлВыгрузки, "ФайлВыгрузки");
	ПараметрыУстановки.ДобавитьЗначение(ЗначениеВСтрокуВнутр(гТабСправочникиВыгрузки), "Справочники");
	ПараметрыУстановки.ДобавитьЗначение(ФлИспр, "ФлИспр");
	ПараметрыУстановки.ДобавитьЗначение(ФлОчистка, "ФлОчистка");
КонецПроцедуры

Процедура ВосстановитьВариантВыгрузки(НаимВарианта)
	Перем Стр;
	СпПарам = гСпВариантовВыгрузки.Получить(НаимВарианта);
	Если ПустоеЗначение(СпПарам) = 1 Тогда
	   Возврат;
	КонецЕсли;
	ТекСпр = СпПарам.Получить("Справочник");
	ВыбФайлВыгрузки = СпПарам.Получить("ФайлВыгрузки");
	Т = ЗначениеИзСтрокиВнутр(СпПарам.Получить("Справочники"));
	ФлИспр = СпПарам.Получить("ФлИспр");
	ФлОчистка = СпПарам.Получить("ФлОчистка");
	
	гТабСправочникиВыгрузки.ВыбратьСтроки();
	Пока гТабСправочникиВыгрузки.ПолучитьСтроку() = 1 Цикл
		Вкл = 0;
		Стр = 0;
		Если Т.НайтиЗначение(гТабСправочникиВыгрузки.Идентификатор, Стр, "Идентификатор") = 1 Тогда
			Т.ПолучитьСтрокуПоНомеру(Стр);
			Вкл = Т.Вкл;
		КонецЕсли;
		гТабСправочникиВыгрузки.Вкл = Вкл;
		Для Инд=1 По гТабСправочникиВыгрузки.Реквизиты.РазмерСписка() Цикл
			РеквизитВкл = 0;
			Если Вкл = 1 Тогда 
				Инд2 = Т.Реквизиты.НайтиЗначение(гТабСправочникиВыгрузки.Реквизиты.ПолучитьЗначение(Инд));
				Если Инд2 > 0 Тогда
					РеквизитВкл = Т.Реквизиты.Пометка(Инд2);
				КонецЕсли;
			КонецЕсли;
			гТабСправочникиВыгрузки.Реквизиты.Пометка(Инд, РеквизитВкл);
		КонецЦикла;
		Инд = СпСправочники.НайтиЗначение(гТабСправочникиВыгрузки.Идентификатор);
		Если Инд > 0 Тогда
			СпСправочники.Пометка(Инд, Вкл);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписьВариантаВыгрузки()
	Если СокрЛП(ВыбВариантВыгрузки) = "" Тогда
	    Предупреждение("Внимание! Не введено наименование настройки!");
		Возврат;
	КонецЕсли;
	СпПарам = гСпВариантовВыгрузки.Получить(СокрЛП(ВыбВариантВыгрузки));
	ЗаполнитьВкл();
	Если ПустоеЗначение(СпПарам) = 1 Тогда
	   СпПарам = СоздатьОбъект("СписокЗначений");
	   СоздатьВариантВыгрузки(СпПарам);
	   гСпВариантовВыгрузки.ДобавитьЗначение(СпПарам, СокрЛП(ВыбВариантВыгрузки));
	Иначе
	   СоздатьВариантВыгрузки(СпПарам);
	   гСпВариантовВыгрузки.Установить(СокрЛП(ВыбВариантВыгрузки), СпПарам);
	КонецЕсли;
    гСпВариантовВыгрузки.ТекущаяСтрока(гСпВариантовВыгрузки.НайтиЗначение(СпПарам));
	СохранитьПараметрыФормы();
КонецПроцедуры

Процедура УдалитьВариантВыгрузки()
	ТекСпис = гСпВариантовВыгрузки.Получить(СокрЛП(ВыбВариантВыгрузки));
	Ном = гСпВариантовВыгрузки.НайтиЗначение(ТекСпис);
	ВыбВариантВыгрузки = "";
	Если Ном > 0 Тогда
		гСпВариантовВыгрузки.УдалитьЗначение(Ном);
		СохранитьПараметрыФормы();
	КонецЕсли;
КонецПроцедуры

Процедура УстанВкл(Фл)
	Для Инд=1  По ТабСправочники.КоличествоСтрок() Цикл 
	   Если Фл = 1 Тогда
	   		ВклСправочники();
	   Иначе
	   	    ТабСправочники.УстановитьЗначение(Инд, "ИДТек", ПолучитьПустоеЗначение());
	   		ТабСправочники.УстановитьЗначение(Инд, "ПредстТек", ПолучитьПустоеЗначение());
	   КонецЕсли;		
	КонецЦикла;
КонецПроцедуры

Процедура ВклСправ(Фл)
	Для Инд=1  По СпСправочники.РазмерСписка() Цикл
	   СпСправочники.Пометка(Инд, Фл)
	КонецЦикла;
КонецПроцедуры

Процедура ВыборРеквизитовВыгрузки()
	Перем СтрПуть, СтрИмя;
	Если (СпСправочники.ТекущаяСтрока() = 0) Или
		 (СпСправочники.ТекущаяСтрока() > СпСправочники.РазмерСписка()) Тогда
		 Возврат;
	КонецЕсли;
	ИДСпр = СпСправочники.ПолучитьЗначение(СпСправочники.ТекущаяСтрока()); 
	Стр = 0;
    Если гТабСправочникиВыгрузки.НайтиЗначение(ИДСпр, Стр, "Идентификатор") = 0 Тогда
		Возврат;
	КонецЕсли;                      
	
	гТабСправочникиВыгрузки.ПолучитьСтрокуПоНомеру(Стр);
    Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение("Выгрузка", "Режим");
	Параметры.ДобавитьЗначение(ИДСпр, "Идентификатор");
	Параметры.ДобавитьЗначение(гТабСправочникиВыгрузки.Реквизиты, "Реквизиты");
    ОткрытьФормуМодально("Обработка.PAR_ATTR", Параметры) ;
КонецПроцедуры

Процедура ПриВыбореФайлаЗагрузки()
	АнализФайлаЗагрузки();
КонецПроцедуры

Процедура ВыборФайлаВыгрузки()
	ВыборФайла(ВыбФайлВыгрузки, "Выберете файл для выгрузки", "Файл для выгрузки");
КонецПроцедуры

Процедура ВыборФайлаЗагрузки()
	ВыборФайла(ВыбФайлЗагрузки, "Выберете файл для загрузки", "Файл для загрузки");
КонецПроцедуры

Процедура ПриАнализеФайлаЗагрузки()
	Если АнализФайлаЗагрузки() = 1 Тогда
		ВклСправочники();			
	КонецЕсли;
КонецПроцедуры

Процедура ПриВыбореЗакладки(Ном, Значен)
	ТекЗакладка = Значен;
	Если Значен = "Загрузка" Тогда
		Форма.ИспользоватьСлой("Основной, Загрузка, ОснЗагрузка", 2);
	ИначеЕсли Значен = "Выгрузка" Тогда
		Форма.ИспользоватьСлой("Основной, Выгрузка", 2);
	ИначеЕсли Значен = "Настройки" Тогда
		Форма.ИспользоватьСлой("Основной, Настройки", 2);
	ИначеЕсли Значен = "Режим" Тогда
		Форма.ИспользоватьСлой("Основной, ОснЗагрузка, Режим", 2);
	КонецЕсли;
КонецПроцедуры

Процедура ПриВыбореСинхронизироватьПоКоду()
	Форма.РамкаРежимаЗагрузки.Доступность(СинхронизироватьПоКоду);
	Форма.ФлИспр.Доступность(СинхронизироватьПоКоду);
	Форма.ФлИспр1.Доступность(СинхронизироватьПоКоду);
	Форма.ФлИспр2.Доступность(СинхронизироватьПоКоду);
КонецПроцедуры               

Процедура ПриОткрытии()
	Форма.ИспользоватьЗакладки(1);
	
	гСпВариантовЗагрузки = СоздатьОбъект("СписокЗначений");
	гСпВариантовВыгрузки = СоздатьОбъект("СписокЗначений");
	гПолучТекст = СоздатьОбъект("Текст");
	
	гТабЗагружСпр = СоздатьОбъект("ТаблицаЗначений");
	гТабЗагружСпр.НоваяКолонка("Идентификатор", "Строка");
	гТабЗагружСпр.НоваяКолонка("Заголовок");
	гТабЗагружСпр.НоваяКолонка("Реквизиты");
	гТабЗагружСпр.НоваяКолонка("СмещениеЗначений");
	
	ТабСправочники.НоваяКолонка("ПредстЗагруж", "Строка",,, "Справочник.загруж.", 12);
	ТабСправочники.НоваяКолонка("ПредстТек", "Строка",,, "Справочник.текущ.", 12);
	ТабСправочники.НоваяКолонка("ИДТек", "Строка");
	ТабСправочники.НоваяКолонка("ИДЗагруж", "Строка");
	ТабСправочники.НоваяКолонка("СоответствиеРекв");
	ТабСправочники.НоваяКолонка("ВладелецУмолч");
	ТабСправочники.ВидимостьКолонки("ИДТек, ИДЗагруж, СоответствиеРекв, ВладелецУмолч", 0);
	
	ФлИспр = 1;
	ФлОчистка = 1;
	СинхронизироватьПоКоду = 1;
	
	УправлениеЗакладками();
	СпСправочники.УдалитьВсе();
	гТабСправочникиВыгрузки = СоздатьОбъект("ТаблицаЗначений");
	гТабСправочникиВыгрузки.НоваяКолонка("Идентификатор"); 
	гТабСправочникиВыгрузки.НоваяКолонка("Реквизиты");
	гТабСправочникиВыгрузки.НоваяКолонка("Вкл", "Число", 1, 0); 
	Для Инд=1 По Метаданные.Справочник() Цикл 
		СпрМД = Метаданные.Справочник(Инд);
		СпРеквизиты = СоздатьОбъект("СписокЗначений");
		Для Инд2=1 По СпрМД.Реквизит() Цикл
			РеквизитМД = СпрМД.Реквизит(Инд2);
			СпРеквизиты.ДобавитьЗначение(РеквизитМД.Идентификатор, РеквизитМД.Представление());
			СпРеквизиты.Пометка(Инд2, 1);
		КонецЦикла;	
		СпСправочники.ДобавитьЗначение(СпрМД.Идентификатор, СпрМД.Представление());
		СпСправочники.Пометка(Инд, 1);                                             
		гТабСправочникиВыгрузки.НоваяСтрока(); 
		гТабСправочникиВыгрузки.Идентификатор = СпрМД.Идентификатор;
		гТабСправочникиВыгрузки.Реквизиты = СпРеквизиты;
	КонецЦикла;
	СпСправочники.СортироватьПоПредставлению();
	ВосстановитьПараметрыФормы();
	Если гСпВариантовЗагрузки.РазмерСписка() = 0 Тогда
		ВыбВариантЗагрузки = "Основной";
	Иначе
		гСпВариантовЗагрузки.ПолучитьЗначение(1, ВыбВариантЗагрузки);
	КонецЕсли;
	Если гСпВариантовВыгрузки.РазмерСписка() = 0 Тогда
		ВыбВариантВыгрузки = "Основной";
	Иначе
		гСпВариантовВыгрузки.ПолучитьЗначение(1, ВыбВариантВыгрузки);
	КонецЕсли;     
КонецПроцедуры

Процедура ПриЗакрытии()
	СохранитьПараметрыФормы();
КонецПроцедуры

Процедура ПриНачалеВыбораЗначения(ЭлемДиалога, ФлагСтандОбр)
	Перем ВыбПоз, СтрПредст;
	Если ЭлемДиалога = "ВыбВариантЗагрузки" Тогда
		ФлагСтандОбр = 0;
		ВыбЗн = "";
		ТекСпис = гСпВариантовЗагрузки.Получить(СокрЛП(ВыбВариантЗагрузки));
		Ном = гСпВариантовЗагрузки.НайтиЗначение(ТекСпис);
		Если Ном > 0 Тогда
			гСпВариантовЗагрузки.ТекущаяСтрока(Ном);
		КонецЕсли;
		Если гСпВариантовЗагрузки.РазмерСписка() = 0 Тогда
			Возврат;
		КонецЕсли;
		ВыбПоз = 0;
		гСпВариантовЗагрузки.ВыбратьЗначение(ВыбЗн, , ВыбПоз, , 2);
		Если (ВыбПоз > 0) И (ВыбПоз <= гСпВариантовЗагрузки.РазмерСписка()) Тогда
			гСпВариантовЗагрузки.ПолучитьЗначение(ВыбПоз, СтрПредст);
			ВыбВариантЗагрузки = СтрПредст;
		КонецЕсли;
	ИначеЕсли ЭлемДиалога = "ВыбВариантВыгрузки" Тогда
		ФлагСтандОбр = 0;
		ВыбЗн = "";
		ТекСпис = гСпВариантовВыгрузки.Получить(СокрЛП(ВыбВариантВыгрузки));
		Ном = гСпВариантовВыгрузки.НайтиЗначение(ТекСпис);
		Если Ном > 0 Тогда
			гСпВариантовВыгрузки.ТекущаяСтрока(Ном);
		КонецЕсли;
		Если гСпВариантовВыгрузки.РазмерСписка() = 0 Тогда
			Возврат;
		КонецЕсли;
		ВыбПоз = 0;
		гСпВариантовВыгрузки.ВыбратьЗначение(ВыбЗн, , ВыбПоз, , 2);
		Если (ВыбПоз > 0) И (ВыбПоз <= гСпВариантовВыгрузки.РазмерСписка()) Тогда
			гСпВариантовВыгрузки.ПолучитьЗначение(ВыбПоз, СтрПредст);
			ВыбВариантВыгрузки = СтрПредст;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

гВерсия = "v 77.01";
гПозЗаголовка = 1;
гПозВерсии = 1;
гПозРеквизитов = 2;

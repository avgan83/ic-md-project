Перем глЗначениеОтбора Экспорт;Перем глРасшифровка Экспорт;Перем глФлагРасшифровки Экспорт;Перем глТаблица Экспорт;Перем глОбновить Экспорт;Перем глВидСубконто1 Экспорт;Перем глВидСубконто2 Экспорт;Перем глСубконто1 Экспорт;
Перем глСубконто2 Экспорт;
Перем сФорматС, сФорматВ, сФорматК;

Перем глДатаЛиста Экспорт;

Перем БухИтоги Экспорт;
Перем глДата1 Экспорт;
Перем глДата2 Экспорт;
Перем глДопРасх Экспорт;

Перем глВладелецПлатежа Экспорт;

Перем Леи Экспорт;
Перем Доллары Экспорт;

Перем Да Экспорт;
Перем Нет Экспорт;

Перем ЧислоСтрок Экспорт;
Перем глНДС Экспорт;

Перем Общ Экспорт;
Перем Упр Экспорт;
Перем Фин Экспорт;

Перем Отсчет Экспорт;
Перем глПользователь Экспорт;
Перем глБлокнотРедактируется Экспорт;
Перем глЧислоСтрок Экспорт;

Перем глДатаСпрНМА Экспорт;
Перем глДатаСпрОС Экспорт;

Перем глСклад Экспорт;
Перем глСч213 Экспорт;
Перем глСч213старый Экспорт;
Перем глМОЛ Экспорт;
Перем СканерШтрихКода Экспорт;
Перем ПрочтеннаяПочта;

Function ЧасНовый(Час,Минута,Секунда,ad)
	OreAdaugate=Цел((Минута+Ad)/60);
	If Час+OreAdaugate>=24 Then 
		ZileAdaugate=Цел((Час+OreAdaugate)/24);
	EndIf;
	If Минута+Ad>=60 Then 
		If Час+OreAdaugate>=24 Then   
			Час2=Час+(OreAdaugate-(ZileAdaugate*24));	
		Else
			Час2=Час+OreAdaugate; 
		EndIf;
		Минута2=Минута+Ad-60*OreAdaugate;
	Else  
		Час2=Час;
		Минута2=Минута+Ad;
	EndIf;
	ЧасНовый=Строка(""+Час2+":"+Минута2+":"+Секунда);
	Return ЧасНовый;
EndFunction

//-----------------------------------------------
Функция ТипКонф() Экспорт //0-непонятно,1-Базовая,2-Комплекс
	Если ФС.СуществуетФайл(КаталогИБ()+"\admin\base.ini")=1 Тогда
		Возврат 1;
	ИначеЕсли ФС.СуществуетФайл(КаталогИБ()+"\admin\cmp.ini")=1 Тогда
		Возврат 2;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции
//-----------------------------------------------
Функция глТекстВалюты(Конт) Экспорт
	ТекстВалюты=Конт.Валюта.Наименование+" курс: "+СокрЛП(Формат(Конт.Курс,"Ч015.4.'"))+" на "+СокрЛП(Конт.Дата_курса);
	Возврат ТекстВалюты;
КонецФункции
//-----------------------------------------------
Функция НайтиЖурнал(ДокДляПоиска) Экспорт //Ищем в какой журнал засунуть документ
	ИДок=СоздатьОбъект("Документ."+ДокДляПоиска.Вид());
	ИДок.ВыбратьДокументы();
	Пока ИДок.ПолучитьДокумент()=1 Цикл
		Если (ПустоеЗначение(ИДок.ТекущийДокумент().ЖурналДокумента)=0) И (ТипЗначения(ИДок.ТекущийДокумент().ЖурналДокумента)=11) Тогда
			Возврат ИДок.ТекущийДокумент().ЖурналДокумента;
		КонецЕсли;
	КонецЦикла;
	Возврат 0;
КонецФункции
//-----------------------------------------------
Функция глПредставлениеДокумента(Конт) Экспорт
	Перем Стр;
	
	Комментарий = Метаданные.Документ(Конт.Вид()).Комментарий;
	Если ПустоеЗначение(Комментарий) = 0 Тогда
		Стр = Комментарий;
	Иначе
		Стр = Метаданные.Документ(Конт.Вид()).Представление();
	КонецЕсли;
	Стр = Стр + " № "+СокрЛП(Конт.НомерДок)+" от "+Формат(Конт.ДатаДок,"Д (0)ДДММММГГГГ");
	
	Возврат Стр;
КонецФункции //глПредставлениеДокумента
//-----------------------------------------------
Функция глКурсДляВалюты(Валюта,ДатаКурса) Экспорт
	Если Валюта=Леи Тогда
		// Для базовой валюты курс всегда равен 1, поэтому отображаем курс Основной валюты
		Кратность=Константа.ОсновнаяВалюта.Кратность.Получить(ДатаКурса);
		Возврат Константа.ОсновнаяВалюта.ТекКурс.Получить(ДатаКурса)/?(Кратность=0,1,Кратность);
	Иначе    // для других валют записываем их собственный курс
		Кратность=Валюта.Кратность.Получить(ДатаКурса);
		Возврат Валюта.ТекКурс.Получить(ДатаКурса)/?(Кратность=0,1,Кратность);
	КонецЕсли;
КонецФункции
//-----------------------------------------------
Функция глВыбратьЖурнал(Док) Экспорт //---Выбор журнала документов при записи
	Если Константа.СпрашиватьНомерЖурнала=Да Тогда
		НЖ=СоздатьОбъект("Справочник.ЖурналыДокументов");
        Пока НЖ.Выбрать("Выберите журнал куда попадет "+Док,"ФормаСписка")=0 Цикл КонецЦикла;
	Иначе
		НЖ=НайтиЖурнал(Док);
		Если НЖ=0 Тогда
		    НЖ=СоздатьОбъект("Справочник.ЖурналыДокументов");
            Пока НЖ.Выбрать("Выберите журнал куда попадет "+Док,"ФормаСписка")=0 Цикл КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат НЖ.ТекущийЭлемент();
КонецФункции
//-----------------------------------------------

Функция глВалютаДок(Док) Экспорт
	// возвращаемое значение валюта документа
	Если ПустоеЗначение(Док)=1 Тогда
		Возврат "";
	КонецЕсли;
	ВидДок=Док.Вид();
	РеквВалюта=Метаданные.Документ(ВидДок).РеквизитШапки("Валюта");
	Если РеквВалюта.Выбран()=1 Тогда
		Если Док.Валюта.Выбран()=1 Тогда
			Возврат Док.Валюта;
		Иначе
			Возврат Леи;
		КонецЕсли;
	Иначе
		Возврат Леи;
	КонецЕсли;
КонецФункции    


//-----------------------------------------------
Процедура ВыборКолвоПриход(Конт,Режим,Выб) Экспорт
	Если Выб.ПометкаУдаления()=1 Тогда
		Предупреждение("Нельзя выбирать помеченные на удаление товары!");
		Возврат;
	КонецЕсли;
	Если Константа.ЗапрашиватьКоличество=Перечисление.Булево.Да Тогда
		Кол=1;
		Если ВвестиЧисло(Кол,"Введите количество",10,0)=1 Тогда
			Конт.НоваяСтрока();
			Если Режим="Каталог" Тогда
				Конт.ТМЦ1=Выб;
			Иначе
				Конт.ТМЦ1=Выб.ТМЦ1;
			КонецЕсли;
			Конт.Количество=Кол;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Конт.НоваяСтрока();
		Если Режим="Каталог" Тогда
			Конт.ТМЦ1=Выб;
		Иначе
			Конт.ТМЦ1=Выб.ТМЦ1;
		КонецЕсли;
		Конт.Количество=1;
	КонецЕсли;
	Конт.СчетТМЦ=Конт.СчетТМЦПоУм;
КонецПроцедуры
//-----------------------------
Процедура глОживить(ДобСтрок) Экспорт
	глЧислоСтрок=глЧислоСтрок+ДобСтрок;
	Состояние("В отчет выведено "+глЧислоСтрок+" строк.");
КонецПроцедуры
//-----------------------------
// Функция возвращает переданное значение параметра (для получения Контекста)
Функция глВзятьКонтекст(Конт) Экспорт
	Возврат Конт;
КонецФункции
/// Функция определяет, принадлежит ли данный документ БухУчету.
/// Передаваемые значения: Документ.
/// Возвращаемые значения: 1- принадлежит БухУчету, 0- не принадлежит.
Функция глПринадлежитБухУчету(Док) Экспорт
	Если Док.Выбран()=0 Тогда Возврат 0;КонецЕсли;
	Возврат Метаданные.Документ(Док.Вид()).БухгалтерскийУчет;
КонецФункции

//------------------------------
/// Функция вызывается из форм журналов.Проводит или отменяет проведение передаваемого документа.
/// Передаваемые значения: Документ.
/// Возвращаемые значения: Нет.        
Процедура глПровестиФ(Док) Экспорт
	Если ПустоеЗначение(Док)=1 Тогда
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(Константа.ДатаЗапретаРедактирования)=0 Тогда
		Если Док.ДатаДок <= Константа.ДатаЗапретаРедактирования Тогда
			Сообщить("Вы не можете отменить проведение у документа с датой раньше чем дата запрета!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	лДокумент=СоздатьОбъект("Документ");
	лДокумент.НайтиДокумент(Док);
	Если лДокумент.Вид()="Операция" Тогда
		Если лДокумент.Операция.ВключитьПроводки()=1 Тогда
			лДокумент.Операция.ВключитьПроводки(0);
		Иначе
			лДокумент.Операция.ВключитьПроводки(1);
		КонецЕсли;
	Иначе
		Если лДокумент.Проведен()=1 Тогда
			лДокумент.СделатьНеПроведенным();
		Иначе
			лДокумент.Провести();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

/// Ф-я вызывается практически из любого журнала д-ов, для перерисовки кнопок (отмены)проведения документов
/// Передаваемые значения: Документ, Контекст формы журнала, в котором присутствуют кнопки "ПровестиИ" и "ПровестиИ1".
/// Возвращаемые значения: Пустая строка.
Функция глФункцияФ(Док,Конт) Экспорт
	Если глПринадлежитБухУчету(Док)=0 Тогда
		Конт.Форма.ПровестиИ.Доступность(0);
		Конт.Форма.ПровестиИ1.Доступность(0);
		Возврат "";
	КонецЕсли;  
	Если Док.Вид()="Операция" Тогда
		Если Док.Операция.ВключитьПроводки()=0 Тогда
			Конт.Форма.ПровестиИ.Видимость(1);
			Конт.Форма.ПровестиИ.Доступность(1);
			Конт.Форма.ПровестиИ1.Видимость(0);
			Конт.Форма.ПровестиИ1.Доступность(0);
		Иначе
			Конт.Форма.ПровестиИ.Видимость(0);
			Конт.Форма.ПровестиИ.Доступность(0);
			Конт.Форма.ПровестиИ1.Видимость(1);
			Конт.Форма.ПровестиИ1.Доступность(1);
		КонецЕсли;      
	Иначе
		Если Док.Проведен()=0 Тогда
			Конт.Форма.ПровестиИ.Видимость(1);
			Конт.Форма.ПровестиИ.Доступность(1);
			Конт.Форма.ПровестиИ1.Видимость(0);
			Конт.Форма.ПровестиИ1.Доступность(0);
		Иначе
			Конт.Форма.ПровестиИ.Видимость(0);
			Конт.Форма.ПровестиИ.Доступность(0);
			Конт.Форма.ПровестиИ1.Видимость(1);
			Конт.Форма.ПровестиИ1.Доступность(1);
		КонецЕсли;      
	КонецЕсли;
	Возврат("");
КонецФункции




Функция глЗначениеПоУмолчанию(ИмяРеквизита) Экспорт

	Если (Метаданные.Константа(ИмяРеквизита).Выбран() = 1) Тогда
	    Возврат(Константа.ПолучитьАтрибут(ИмяРеквизита));
	Иначе
	    Возврат(ПолучитьПустоеЗначение());
	КонецЕсли;
КонецФункции //глЗначениеПоУмолчанию

Функция глПолучитьСписокВводимыхНаОсновании(Конт) Экспорт
	Перем СписокВидов, ВидДок;
	Перем Счетчик, Позиция;
	Перем ИД, Представление;
	
	// на основе объекта "Метаданные" формируем список видов документов
	// которые можно вводить на основании заданного
	СписокВидов = СоздатьОбъект("СписокЗначений");
	ВидДок = Конт.Вид();
	Для Счетчик=1 По Метаданные.Документ(ВидДок).ВводимыеНаОснованииДокументы.Количество() Цикл
		ИД = Метаданные.Документ(ВидДок).ВводимыеНаОснованииДокументы.Получить(Счетчик).Идентификатор;
		Представление = Метаданные.Документ(ВидДок).ВводимыеНаОснованииДокументы.Получить(Счетчик).Представление();
		СписокВидов.ДобавитьЗначение(ИД,Представление);
	КонецЦикла;
	
	Возврат СписокВидов;
КонецФункции

Процедура глСформироватьДеревоДокументов(Док)  Экспорт
	// Эта процедура формирует Дерево подчиненных документов
	Если ТипЗначенияСтр(Док)="Документ" Тогда
		Докум=Док;
	ИначеЕсли ТипЗначенияСтр(Док)="ГрупповойКонтекст" Тогда
		Если Док.СравнитьТА()=-2 Тогда
			Предупреждение("Документ не записан!");
			Возврат;
		Иначе
			Докум=Док.ТекущийДокумент();
		КонецЕсли;
	Иначе
		Предупреждение("При вызове проц. глСформироватьДеревоДокументов в параметре не передан Документ");
		Возврат;
	КонецЕсли;

	ОткрытьФорму("Отчет.ДеревоДокументов"+"#",Докум);

КонецПроцедуры

Процедура глСформироватьДвиженияДокумента(Док)  Экспорт
	Если ТипЗначенияСтр(Док)="Документ" Тогда
		Докум=Док;
	ИначеЕсли ТипЗначенияСтр(Док)="ГрупповойКонтекст" Тогда
		Если Док.Выбран()=0 Тогда
			Предупреждение("Документ не записан!");
			Возврат;
		Иначе
			Докум=Док.ТекущийДокумент();
		КонецЕсли;
	Иначе
		Предупреждение("При вызове проц. глСформироватьДвиженияДокумента в параметре не передан Документ");
		Возврат;
	КонецЕсли;

	ОткрытьФорму("Отчет.ДвиженияДокумента"+"#",Докум);

КонецПроцедуры

// Конт - документ или контекст формы документа, на основании которого будет
//           вводится новый документ
// Описание:
// формирует список документов, которые можно ввести на основании данного.
// Вводится на основании новый документ на основе выбранного вида
Процедура глВыписатьПодчиненныйДокумент(Конт) Экспорт
	Перем СписокВидов, ВидПодч;
	
	// ввод документа на основании
	Если НЕ((ТипЗначенияСтр(Конт) = "Документ") ИЛИ (ТипЗначенияСтр(Конт) = "ГрупповойКонтекст")) Тогда
		Сообщить("Ошибка: параметр должен иметь тип значения 'Документ' или 'ГрупповойКонтекст'");
		Возврат;
	Иначе
		Если Конт.Выбран() = 0 Тогда
			Предупреждение("Нельзя вводить на основании не сохраненного документа!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СписокВидов = глПолучитьСписокВводимыхНаОсновании(Конт);
	Если СписокВидов.РазмерСписка() = 0 Тогда
		Предупреждение("Нельзя вводить на основании данного вида документа!");
		Возврат;
	КонецЕсли;
	
	Если ТипЗначенияСтр(Конт)="ГрупповойКонтекст" Тогда
		Если Конт.Модифицированность()=1 Тогда
		    Если Вопрос("Изменения документа не записаны. Это может привести к некорректному"+РазделительСтрок+
			            "заполнению вводимого на основании документа. Записать документ?","Да+Нет")="Да" Тогда
				Конт.Записать();
		    КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Позиция = 0;
	Если СписокВидов.ВыбратьЗначение(ВидПодч,"Выбор вида документа",Позиция) = 1 Тогда
		// Выбрали вид документа
		ОткрытьФорму("Документ."+ВидПодч,,Конт.ТекущийДокумент());
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// Конт - контекст формы документа
// СписокДействий - список значений, содержащий список возможных действий по документу
// вызывается по кнопке "Действия..." в документе

Функция глДействия(Конт,СписокДействий=0) Экспорт //По кнопке "Действия"
	Перем Действие, Валюты;
	Перем СписокВидов, ВидПодч;
	Перем ДокументЖурнала;
	Если (ТипЗначенияСтр(Конт)<>"ГрупповойКонтекст") и (Конт.Выбран()=0) Тогда
		Предупреждение("Документ не выбран!");
		Возврат 0;
	КонецЕсли;        
	ВидДок=Конт.Вид();
	Если ТипЗначенияСтр(СписокДействий)<>"СписокЗначений" Тогда
		СписокДействий = СоздатьОбъект("СписокЗначений");
	КонецЕсли;        
	//Проверка на наличие в списке строки ввод на основании
	Если (Метаданные.Документ(ВидДок).ВводимыеНаОснованииДокументы.Количество()>0) Тогда
		Если (СписокДействий.НайтиЗначение("Ввести на основании")=0) Тогда
			СписокДействий.ДобавитьЗначение("Ввести на основании");
		КонецЕсли;        
	ИначеЕсли (СписокДействий.НайтиЗначение("Ввести на основании")>0) Тогда
		СписокДействий.УдалитьЗначение(СписокДействий.НайтиЗначение("Ввести на основании"));
	КонецЕсли;        
	
	//Проверка на наличие в списке строки движение документа
	Если (Метаданные.Документ(ВидДок).РазрешитьПроведение=1) Тогда
		Если (СписокДействий.НайтиЗначение("Отчет о движениях документа")=0) Тогда
			СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
		КонецЕсли;        
	ИначеЕсли (СписокДействий.НайтиЗначение("Отчет о движениях документа")>0) Тогда
		СписокДействий.УдалитьЗначение(СписокДействий.НайтиЗначение("Отчет о движениях документа"));
	КонецЕсли;        
	
	//Проверка на наличие в списке строки "Открыть  в журнале"
	Если (ТипЗначенияСтр(Конт)="ГрупповойКонтекст") Тогда
		Если (СписокДействий.НайтиЗначение("Открыть  в журнале")=0) Тогда
			СписокДействий.ДобавитьЗначение("Открыть  в журнале");
		КонецЕсли;        
	ИначеЕсли (СписокДействий.НайтиЗначение("Открыть  в журнале")>0) Тогда
		СписокДействий.УдалитьЗначение(СписокДействий.НайтиЗначение("Открыть  в журнале"));
	КонецЕсли;
	//Проверка на наличие в списке строки "Структура подчиненности"
	Если (СписокДействий.НайтиЗначение("Структура подчиненности")=0) Тогда
		СписокДействий.ДобавитьЗначение("Структура подчиненности");
	КонецЕсли;
	//Печать реестра документа
	Если (СписокДействий.НайтиЗначение("Сформировать реестр")=0) Тогда
		СписокДействий.ДобавитьЗначение("Сформировать реестр");
	КонецЕсли;
	
	// Эта процедура формирует печать докумена
	Если ТипЗначенияСтр(Конт)="Документ" Тогда
		СтрВидДок=Конт.Вид();
		
		Если СтрВидДок="АвансовыйОтчет" Тогда
			СписокДействий.ДобавитьЗначение("Печать Авансовый отчет");
		ИначеЕсли СтрВидДок="АктНаСписание" Тогда
			СписокДействий.ДобавитьЗначение("Печать Акт");
		ИначеЕсли СтрВидДок="ВводОстатков" Тогда
			СписокДействий.ДобавитьЗначение("Печать ВводОстатков");
		ИначеЕсли СтрВидДок="Выдача" Тогда
			СписокДействий.ДобавитьЗначение("Печать Листки");
			СписокДействий.ДобавитьЗначение("Печать Ведомость");
			СписокДействий.ДобавитьЗначение("Печать РасчетнаяВедомость");
		ИначеЕсли СтрВидДок="ВыпискиБанка" Тогда
			//Нет
		ИначеЕсли СтрВидДок="ДополнительныеРасходы" Тогда
			СписокДействий.ДобавитьЗначение("Печать Расход");
		ИначеЕсли СтрВидДок="ЗакрытиеСчетовНовое" Тогда
			//Нет
		ИначеЕсли СтрВидДок="ЗаписьВКнигуПокупок" Тогда
			//Нет
		ИначеЕсли СтрВидДок="ЗаписьВКнигуПродаж" Тогда
			//Нет
		ИначеЕсли СтрВидДок="ЗаполнениеВалют" Тогда
			//Нет
		ИначеЕсли СтрВидДок="КапитализацияЗатрат" Тогда
			СписокДействий.ДобавитьЗначение("Печать Таблица");
		ИначеЕсли СтрВидДок="Льготы" Тогда
			СписокДействий.ДобавитьЗначение("Печать Льгота");
		ИначеЕсли СтрВидДок="НакладнаяНаВозврат" Тогда
			//Нет
		ИначеЕсли СтрВидДок="НакладнаяНаВозвратПоставщику" Тогда
			СписокДействий.ДобавитьЗначение("Печать Bon de primire");
		ИначеЕсли СтрВидДок="НачальныеОбороты" Тогда
			//Нет
		ИначеЕсли СтрВидДок="НачислениеИзносаОС" Тогда
			//Нет
		ИначеЕсли СтрВидДок="Начисления" Тогда
			СписокДействий.ДобавитьЗначение("Печать Начисление");
		ИначеЕсли СтрВидДок="НачислИзносНМА" Тогда
			//Нет
		ИначеЕсли СтрВидДок="ОтчетКассира" Тогда
			СписокДействий.ДобавитьЗначение("Печать ОтчетКассира");
		ИначеЕсли СтрВидДок="Перемещение" Тогда
			СписокДействий.ДобавитьЗначение("Печать Накладная на Перемещение");
		ИначеЕсли СтрВидДок="ПлатежноеПоручение" Тогда
			СписокДействий.ДобавитьЗначение("Печать Платежка");
			СписокДействий.ДобавитьЗначение("Печать Казначейская");
		ИначеЕсли СтрВидДок="ПриходБСО" Тогда
			//Нет
		ИначеЕсли СтрВидДок="ПриходнаяНакладная" Тогда
			СписокДействий.ДобавитьЗначение("Печать Bon de primire");
		ИначеЕсли СтрВидДок="ПрихНалоговаяНакладная" Тогда
			СписокДействий.ДобавитьЗначение("Печать НалоговойНакладной");
		ИначеЕсли СтрВидДок="ПриходныйКассовый" Тогда
			СписокДействий.ДобавитьЗначение("Печать приходного кассового ордера");
		ИначеЕсли СтрВидДок="РасходнаяНакладная" Тогда
			СписокДействий.ДобавитьЗначение("Печать ТТН");
		ИначеЕсли СтрВидДок="РасходныйКассовый" Тогда
			СписокДействий.ДобавитьЗначение("Печать расходного кассового ордера");
		ИначеЕсли СтрВидДок="СписаниеБСО" Тогда
			СписокДействий.ДобавитьЗначение("Печать Акт");
		ИначеЕсли СтрВидДок="СписаниеРасходовБудущихПериодов" Тогда
			//Нет
		ИначеЕсли СтрВидДок="СписаниеУслугНаЗатраты" Тогда
			//Нет
		ИначеЕсли СтрВидДок="СчетНаОплату" Тогда
			СписокДействий.ДобавитьЗначение("Печать Счет на Оплату");
		ИначеЕсли (СтрВидДок="СчетФактураПрих") или (СтрВидДок="ПрихНалоговаяНакладная") Тогда
			//Нет
		ИначеЕсли (СтрВидДок="СчетФактураРасх") Тогда
			СписокДействий.ДобавитьЗначение("Печать Шаблон СФ");
		ИначеЕсли (СтрВидДок="РасхНалоговаяНакладная") Тогда
			СписокДействий.ДобавитьЗначение("Печать Налоговой Накладной");
		ИначеЕсли (СтрВидДок="ПутевойЛист") Тогда
			СписокДействий.ДобавитьЗначение("Печать Отчета по списанию бензина");
		КонецЕсли;
	КонецЕсли;
	
	НомПоз=0;КолПоз=СписокДействий.РазмерСписка();ПозНеПеч=0;
	
	Если СписокДействий.ВыбратьЗначение(Действие,,НомПоз,,1)>0 Тогда
		Если Действие = "Отчет о движениях документа" Тогда
			ПозНеПеч=ПозНеПеч+1;глСформироватьДвиженияДокумента(Конт);
		ИначеЕсли Действие = "Структура подчиненности" Тогда
			ПозНеПеч=ПозНеПеч+1;глСформироватьДеревоДокументов(Конт);
	//	ИначеЕсли Действие = "Выбор валюты печати" Тогда
	//		Валюты = СоздатьОбъект("Справочник.Валюты");
	//		Если Валюты.Выбрать("Выберите валюту печати","") > 0 Тогда
	//			Конт.ВалютаПечати = Валюты.ТекущийЭлемент();
	//		КонецЕсли;        
	//	ИначеЕсли Действие = "Обновление цен в справочнике" Тогда
	//		ОткрытьФормуМодально("Обработка.КопированиеЦенИзДокументаВКатегорию",Конт);
		ИначеЕсли Действие = "Ввести на основании" Тогда
			ПозНеПеч=ПозНеПеч+1;глВыписатьПодчиненныйДокумент(Конт);
		ИначеЕсли Действие = "Открыть  в журнале" Тогда
			ПозНеПеч=ПозНеПеч+1;
			Если Конт.СравнитьТА()=-2 Тогда
				Предупреждение("Документ не записан!");
			Иначе
				ДокументЖурнала = Конт.ТекущийДокумент();
				ОткрытьФорму("Журнал.Общий.ФормаСписка",ДокументЖурнала);
			КонецЕсли;
		ИначеЕсли Действие = "Сформировать реестр" Тогда
			ПозНеПеч=ПозНеПеч+1;
			ОткрытьФорму("Обработка.ПечатьДокументов",Конт.ТекущийДокумент().Вид());
		ИначеЕсли Действие = "Печать Отчета по списанию бензина" Тогда
			ОткрытьФорму("Отчет.СписаниеБензина");
		ИначеЕсли НомПоз>ПозНеПеч Тогда
			ОткрытьФорму(Конт.ТекущийДокумент(),Сред(СписокДействий.ПолучитьЗначение(НомПоз),8,СтрДлина(СписокДействий.ПолучитьЗначение(НомПоз))-7));
		Иначе
			Возврат Действие;
		КонецЕсли;
	КонецЕсли;
КонецФункции

//-----------------------------
Функция глМожноЗаписатьДокумент(Конт) Экспорт
	Если ПустоеЗначение(Константа.ДатаЗапретаРедактирования)=0 Тогда
		Если Конт.ДатаДок<=Константа.ДатаЗапретаРедактирования Тогда
			Предупреждение("Нельзя записывать документы с датой, более ранней чем дата 
		                	|запрета редактирования!");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции

//-----------------------------
Процедура глПроверкаВводаНаОсновании(ДокО,ДокНаО) Экспорт
	Если Не(Константа.ПроверкаВводаНаОсновании=Да) Тогда
		Возврат;
	КонецЕсли;
	Док=СоздатьОбъект("Документ");
	Док.ВыбратьПодчиненныеДокументы(,,ДокО);
	Пока Док.ПолучитьДокумент()=1 Цикл
		Если (Док.Вид()=ДокНаО.Вид()) и (ДокНаО<>Док.ТекущийДокумент()) Тогда
			Если Вопрос("На основании "+СокрЛП(ДокО)+" уже был введен 
						|"+СокрЛП(Док.ТекущийДокумент())+".Открыть его ?",4)=6 Тогда
				ОткрытьФорму(Док.ТекущийДокумент());
			КонецЕсли;
			СтатусВозврата(0);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//-----------------------------
Процедура глПроверкаРазрешенияРедактирования(Конт,ВидДок="") Экспорт
	Конт.ПриЗаписиПерепроводить(1);
	Если ПустоеЗначение(Константа.ДатаЗапретаРедактирования)=0 Тогда
		Если (Конт.ДатаДок <= Константа.ДатаЗапретаРедактирования) И (Конт.Форма.ТолькоПросмотр()=0) Тогда
			Конт.Форма.ТолькоПросмотр(1);
			Предупреждение("Разрешен только просмотр документа!",4);
			Возврат;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//----------------------------
Функция ЭтоТМЦ(Субк) Экспорт
	Если (Субк.Вид()="Товары") Или (Субк.Вид()="ГотоваяПродукция") Или (Субк.Вид()="Материалы") Тогда
		Возврат Да
	Иначе
		Возврат Нет
	КонецЕсли;
КонецФункции
//----------------------------
Функция ЭтоСчетТМЦ(Счет) Экспорт
	Вид=Строка(Счет.ВидСубконто(1));
	Если ((Вид="Товары")ИЛИ(Вид="Материалы")ИЛИ
		(Вид="ГотоваяПродукция")) Тогда
		Возврат Да;
	Иначе
		Возврат Нет;
	КонецЕсли;
КонецФункции
//-----------------------------
Функция глАбс(__Число) Экспорт //---Абсолют
	Возврат ?(__Число<0,__Число*(-1),__Число);
КонецФункции
//-----------------------------
Функция ДеньКвартала(__Дата)
	Возврат __Дата-НачКвартала(__Дата);
КонецФункции
//-----------------------------
Функция ДатаОчередногоПоказа(Блокнот)
	ТД = ТекущаяДата();
	Если Блокнот.Периодичность=0 Тогда
		Возврат Блокнот.__Дата;
	ИначеЕсли Блокнот.Периодичность=1 Тогда
		Возврат Макс(ТД,Блокнот.__Дата);
	ИначеЕсли Блокнот.Периодичность=2 Тогда
		Если Число(Блокнот.__ДатаПоказа)=0  Тогда
			Возврат КонНедели(Блокнот.__Дата)+НомерДняНедели(Блокнот.__Дата)
		Иначе
			Возврат КонНедели(Блокнот.__ДатаПоказа)+НомерДняНедели(Блокнот.__Дата);
		КонецЕсли;
	ИначеЕсли Блокнот.Периодичность=3 Тогда
		Если Число(Блокнот.__ДатаПоказа)=0  Тогда
			__ДатаПоказа=Блокнот.__Дата
		Иначе
			__ДатаПоказа=Блокнот.__ДатаПоказа
		КонецЕсли;
		ДнейВпериоде=КонМесяца(КонМесяца(__ДатаПоказа)+1)-НачМесяца(КонМесяца(__ДатаПоказа)+1)+1;
		Возврат КонМесяца(__ДатаПоказа)+Мин(ДатаЧисло(Блокнот.__Дата),ДнейВпериоде);
	ИначеЕсли Блокнот.Периодичность=4 Тогда
		Если Число(Блокнот.__ДатаПоказа)=0  Тогда
			__ДатаПоказа=Блокнот.__Дата
		Иначе
			__ДатаПоказа=Блокнот.__ДатаПоказа
		КонецЕсли;
		ДнейВпериоде=КонКвартала(КонКвартала(__ДатаПоказа)+1)-НачКвартала(КонКвартала(__ДатаПоказа)+1)+1;
		Возврат КонКвартала(__ДатаПоказа)+Мин(ДеньКвартала(Блокнот.__Дата)+1,ДнейВпериоде);
	КонецЕсли;
КонецФункции

//-----------------------------
Функция глЕстьРеквизитШапки(ИмяРеквизита, ВидДокумента) Экспорт
	Перем Реквизит;
	Если (ПустоеЗначение(ВидДокумента) = 1) ИЛИ
	     (ПустоеЗначение(ИмяРеквизита) = 1) Тогда
		Возврат Нет;
	КонецЕсли;
	Реквизит=Метаданные.Документ(ВидДокумента).РеквизитШапки(ИмяРеквизита);
	Возврат ?(Реквизит.Выбран()=1, Да, Нет );
КонецФункции
//-----------------------------
Функция глЕстьРеквизитМнЧ(ИмяРеквизита,ВидДокумента) Экспорт
	Перем Реквизит;    // 
	Если (ПустоеЗначение(ВидДокумента) = 1) ИЛИ
	     (ПустоеЗначение(ИмяРеквизита) = 1) Тогда
		Возврат Нет;
	КонецЕсли;
	Реквизит=Метаданные.Документ(ВидДокумента).РеквизитТабличнойЧасти(ИмяРеквизита);
	Возврат ?(Реквизит.Выбран()=1, Да, Нет );
КонецФункции
//-----------------------------
// Обработка расшифровки списка ошибок обновления базы данных
Процедура глОбработкаЯчейкиТаблицыОшибокUpgrade(Расшифровка,Таблица)  Экспорт
	Перем Расш,ОбъектОшибки;
	Перем ОшибкаИсправлена;                 
	Перем ОбъектОшибки2;
	Перем Область;
	
	Расш = Расшифровка.Получить("Расшифровка");
	ОбъектОшибки = Расшифровка.Получить("ОбъектОшибки");
	
	ОткрытьФормуМодально(Расш);
	                
	ОбъектОшибки2 = СоздатьОбъект("Справочник."+ОбъектОшибки.Вид());
	ОбъектОшибки2.ИспользоватьВладельца(ОбъектОшибки.Владелец.ТекущийЭлемент());
	ОбъектОшибки2.НайтиЭлемент(ОбъектОшибки.ТекущийЭлемент());
	
	Если ОбъектОшибки=Расш Тогда
		Если ВРег(ОбъектОшибки.Вид())="ЕДИНИЦЫ" Тогда
			Если ОбъектОшибки.Коэффициент<>1 Тогда
				Если Вопрос("Установить коэффициент пересчета количества равным 1?","Да+Нет")="Да" Тогда
					ОбъектОшибки2.Коэффициент = 1;
					ОбъектОшибки2.Записать();
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	          
	
	ОшибкаИсправлена = 0;
	Если ВРег(ОбъектОшибки.Вид())="ЕДИНИЦЫ" Тогда
		Если ОбъектОшибки2.Коэффициент=1 Тогда
			ОшибкаИсправлена = 1;
		КонецЕсли;
	ИначеЕсли ВРег(ОбъектОшибки.Вид())="ЦЕНЫ" Тогда
		Если ОбъектОшибки2.Валюта.Получить(РабочаяДата()).Выбран()>0 Тогда
			ОшибкаИсправлена = 1;
		КонецЕсли;
	КонецЕсли;
        
	Область = Таблица.Область(Расшифровка.Получить("Область"));        
	Если ОшибкаИсправлена = 1 Тогда
		Область.Текст = "Да";
	Иначе
		Область.Текст = "";
	КонецЕсли;	      
	Таблица.Показать();
	
КонецПроцедуры	

//----------------------------
// СТАРАЯ !!!!!! Обработка расшифровки стандартных отчетов
//Процедура ОбработкаЯчейкиТаблицы(Расшифровка, СтандартнаяОбработка, Таблица) Экспорт
//	Перем Отчет;
//
//	Если ТипЗначенияСтр(Расшифровка) <> "СписокЗначений" Тогда
//		СтандартнаяОбработка = 1;
//		Возврат;
//	КонецЕсли;
//
//	 // Расшифровка отчета
//	Док = Расшифровка.Получить("Документ");
//	Если ТипЗначения(Док) <> 0 Тогда
//		ОткрытьФорму("Операция",, Док, Расшифровка.Получить("НомерПроводки"),
// 					Расшифровка.Получить("НомерКорреспонденции"),-1);
//	Иначе
//		Если Расшифровка.Получить("Меню") = 1 Тогда
//			Меню = СоздатьОбъект("СписокЗначений");
//			Меню.ДобавитьЗначение("КарточкаСчета", "Карточка счета");
//			Если Расшифровка.Получить("Счет").КоличествоСубконто()>0 Тогда
//				Меню.ДобавитьЗначение("ОборотноСальдоваяВедомостьПоСчету", "Ведомость по субконто");
//			КонецЕсли;
//			Меню.ДобавитьЗначение("АнализСчета", "Анализ счета");
//			Меню.ДобавитьЗначение("ОтчетПоПроводкам", "Отчет по проводкам");
//			Меню.ДобавитьЗначение("ГлавнаяКнига", "Обороты счета (Гл. книга)");
//			Меню.ДобавитьЗначение("ЖурналОрдер", "Журнал-ордер (ведомость) по счету");
//			Если Меню.ВыбратьЗначение(Отчет, "",,, 1) = 0 Тогда
//				Возврат;
//			КонецЕсли;
//		Иначе
//			Отчет = Расшифровка.Получить("Отчет");
//		КонецЕсли;
//
//		глРасшифровка = Расшифровка;
//		глВидСубконто1=Расшифровка.Получить("ВидСубконто1");
//		глВидСубконто2=Расшифровка.Получить("ВидСубконто2");
//		глСубконто1=Расшифровка.Получить("Субконто1");
//		глСубконто2=Расшифровка.Получить("Субконто2");
//		глФлагРасшифровки = 1;
//		глОбновить = Число(Расшифровка.Получить("Обновить"));
//		Если глОбновить <> 0 Тогда
//			глТаблица = Таблица;
//		КонецЕсли;
//
//		ОткрытьФорму("Отчет."+Отчет+"#");
//		глФлагРасшифровки = 0;
//		глРасшифровка = 0;
//		глОбновить = 0;
//		глВидСубконто1=0;
//		глВидСубконто2=0;
//		глСубконто1=0;
//		глСубконто2=0;
//	КонецЕсли;
//КонецПроцедуры


// Обработка расшифровки стандартных отчетов
Процедура ОбработкаЯчейкиТаблицы(Расшифровка, СтандартнаяОбработка, Таблица) Экспорт
	Перем Отчет;

	Если ТипЗначенияСтр(Расшифровка) <> "СписокЗначений" Тогда
		СтандартнаяОбработка = 1;
		Возврат;
	КонецЕсли;

	// если в списке Расшифровка присутствует значение "ДокументЖурнала", и оно непусто
	// то запускаем общий журнал документа с позиционированием на "ДокументЖурнала"
	ДокументЖурнала=Расшифровка.Получить("ДокументЖурнала");
	Если ПустоеЗначение(ДокументЖурнала)=0 Тогда
		КонтЖурн=ДокументЖурнала;
		Если ОткрытьФорму("Журнал.Общий.ФормаСписка",КонтЖурн)=0 Тогда
			Возврат;
		КонецЕсли;
		СтандартнаяОбработка = 0;
		Возврат;
	КонецЕсли;
		
	 // Расшифровка отчета
	Док = Расшифровка.Получить("Документ");
	Если ТипЗначения(Док) <> 0 Тогда
		ОткрытьФорму("Операция",, Док, Расшифровка.Получить("НомерПроводки"),
 					Расшифровка.Получить("НомерКорреспонденции"),-1);
	Иначе   
 		Меню = Расшифровка.Получить("Меню");
		Если ТипЗначенияСтр(Меню) = "СписокЗначений" Тогда
			Если Меню.ВыбратьЗначение(Отчет, "",,, 1) = 0 Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Отчет = Расшифровка.Получить("Отчет");
		КонецЕсли;

		глРасшифровка = Расшифровка;
		глФлагРасшифровки = 1;
		глОбновить = Число(Расшифровка.Получить("Обновить"));
		Если глОбновить <> 0 Тогда
			глТаблица = Таблица;
		КонецЕсли;
		
		Если Отчет = "ОборотноСальдоваяВедомостьПоСчету" Тогда
			Счет = Расшифровка.Получить("Счет");
			Если Счет.КоличествоСубконто() = 0 Тогда
				Расшифровка.Установить("ДанныеПоСубсчетам", Счет.ЭтоГруппа());
			КонецЕсли;
		КонецЕсли;
		
		Если Отчет = "ГлавнаяКнигаДетально" Тогда
			Счет = Расшифровка.Получить("Счет");
		КонецЕсли;
		
        Если ПустоеЗначение(Отчет)=0 Тогда
			Если Метаданные.Отчет(Отчет).Выбран() = 1 Тогда
				ОткрытьФорму("Отчет."+Отчет+"#");
			ИначеЕсли ФС.СуществуетФайл(Отчет) = 1 Тогда
				ОткрытьФорму("Отчет",, Отчет);
			КонецЕсли;
		КонецЕсли;
		глФлагРасшифровки = 0;
		глРасшифровка = 0;
		глОбновить = 0;
	КонецЕсли;
КонецПроцедуры // ОбработкаЯчейкиТаблицы

// глРедактироватьИсториюЗначений(Конт, Реквизиты = "", Заголовок = " ", Просмотр = 0)
// Параметры:
//  Конт - текущий контекст формы
//  Реквизиты - список реквизитов и их взаимосвязь для редактирования. если
//             передана пустая строка то редактируются все периодические реквизиты
//             данного справочника. реквизиты перечисляются через запятую.
//  <Реквизиты> = <Реквизит>{,<Реквизит>}
//  <Реквизит> = <ИдентификаторРеквизита> [<Ширина>][(<НастройкаКолонки>{,<НастройкаКолонки>})]
//  <НастройкаКолонки> = <Счет>|<Владелец>|<Форма>|<ВидРедактирования>
//  <ИдентификаторРеквизита> - идентификатор реквизита который будет редактироваться
//								в данной колонке
//  <Ширина> - число, которое задает ширину колонки
//  <Счет> = <НомерСубконто> <РеквизитСчета>
//  <НомерСубконто> - число задающее номер субконто счета
//  <РеквизитСчета> - идентификатор реквизита счета субконтом, которого является
//						редактируемый реквизит
//  <Владелец> - идентификатор реквизита владельца редактируемого реквизита
//  <Форма> = ФОРМА(<ИдентификаторФормы>)
//  <ИдентификаторФормы> - идентификатор формы которая будет вызываться для редактирования реквизита
//  <ВидРедактирования> = Флажок | ПолеСоСписком(Строка{,Строка}) // только для реквизитов типа число
//             Пример:
//					"СчетЗатрат 10, Субконто1 20(1 СчетЗатрат, Форма(РедСубконтоСотрудника)), Субконто2 20(2 СчетЗатрат, Субконто1, Форма(РедСубконтоСотрудника)), Субконто3 20(3 СчетЗатрат, Субконто2, Форма(РедСубконтоСотрудника)), СтатьяОтчисленийНаСоцНужды 20(1 СчетЗатрат, Форма(РедСтатьяОтчисленийСотрудника))"
//             будет редактироваться 5 реквизитов, причем тип реквизита Субконто1 определяется 1 видом
//             субконто реквизита СчетЗатрат, для Субконто2 тип определяется 2 видом субконто, владелец задается
//             реквизитом Субконто1 и т.д. Ширина колонки Счет равна 10 символов, а остальных колонок 20 символов.
//			   форма редактирования для реквизита СчетЗатрат берется по умолчанию, для реквизитов Субконто форма РедСубконтоСотрудника,
//			   для реквизита СтатьяОтчисленийНаСоцНужды форма РедСтатьяОтчисленийСотрудника.
//             Пример:
//				     "ТипСотрудника 40(ПолеСоСписком(Основное место работы,Внешнее совместительство,Работа по договору подряда))"
//             редактируется один реквизит ТипСотрудника, ширина 40 символов. редактируется полем со списком, в котром 3 значения:
//             1 - Основное место работы
//			   2 - Внешнее совместительство
//             3 - Работа по договору подряда
//  Заголовок - заголовок окна истории значений реквизитов
//  Просмотр - режим открытия формы
//  Просмотр = 0 - кнопки редактирования доступны
//  Просмотр = 1 - кнопки редактирования не доступны
//
// Описание
//  Процедура открывает обработку для просмотра/редактирования истории 
//  периодических реквизитов. 
//
Процедура глРедактироватьИсториюЗначений(Конт, Реквизиты = "", Заголовок = " ", Просмотр = 0) Экспорт
	Перем Спр;

	Если Конт.Выбран() = 0 Тогда
		Предупреждение("Просмотр истории значений возможен только для записанного элемента.");
		Возврат;
	ИначеЕсли Конт.ЭтоГруппа() = 1 Тогда
		Возврат;
	КонецЕсли;

	СЗ = СоздатьОбъект("СписокЗначений");
	СЗ.ДобавитьЗначение(Конт, "Контекст");
	СЗ.ДобавитьЗначение(Реквизиты, "Реквизиты");
	СЗ.ДобавитьЗначение(Заголовок, "Заголовок");
	Если Конт.Форма.ТолькоПросмотр() = 1 Тогда
		Просмотр = 1;
	КонецЕсли;
	СЗ.ДобавитьЗначение(Просмотр, "Просмотр");
	ОткрытьФорму("Отчет.СписокПериодическихРеквизитов#"+ЗначениеВСтрокуВнутр(Конт.ТекущийЭлемент()), СЗ);
КонецПроцедуры //глРедактироватьИсториюЗначений
//-----------------------------
Функция глЗаписьПериодическихРеквизитов(Конт) Экспорт
	Если ПустоеЗначение(Конт.СохранениеПериодическихРеквизитов(5)) = 1 Тогда
		//Периодические реквизиты не изменялись
		Возврат 1;
	КонецЕсли;

	Параметр = Конт;
	ОткрытьФормуМодально("Обработка.ЗаписьПериодическихРеквизитов", Параметр);
	Возврат Параметр;
КонецФункции //глЗаписьПериодическихРеквизитов
//----------------------------
Процедура УстановитьКонстанту(П, Объект, Значение)
	П.ИспользоватьОбъект(Объект);
	П.ВыбратьЗначения();
	Если П.ПолучитьЗначение() = 0 Тогда
		П.ДатаЗнач = НачГода(РабочаяДата());
		П.Значение = Значение;
		П.Записать();
	КонецЕсли;
КонецПроцедуры
//----------------------------
Функция КурсДляВалюты(Валюта,ДатаКурса) Экспорт
	Если Валюта=Леи Тогда
		Возврат 1
	Иначе
		Возврат Валюта.ТекКурс.Получить(ДатаКурса);
    КонецЕсли;
КонецФункции
//----------------------------
Процедура ДобавлениеНуля(Жертва) Экспорт
	Если СтрДлина(Жертва)=1 Тогда
		Жертва="0"+Жертва;
	КонецЕсли;
КонецПроцедуры
//----------------------------
Функция СтрДок(Док) Экспорт
	Если Док.Выбран()=1 Тогда
		Возврат Док.Вид()+" № "+СокрЛП(Док.НомерДок)+" от "+Формат(Док.ДатаДок,"ДДММГГГГ");
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// глПреобразоватьНомерДок( <НомерДок>, <ВыводитьНули> ,<ВыводитьПрефикс> ) Экспорт
//
// Параметры:
//  <НомерДок> - значение типа Строка - номер документа 
//  <ВыводитьНули> 
//     	 	   - число 
//				0 - не выводить лидирующие нули
//				1 - выводить лидирующие нули
//  <ВыводитьПрефикс> 
//     	 	   - число 
//				0 - не выводить префикс
//				1 - выводить префикс
//				2 - выводить префикс сзади
//
// Возвращаемое значение.
//  Строка - номер документа для печати
//
// Описание:
// Процедура предназначена для преобразования номера документа.
// Используется, например, при выводе номера документа на печать.
//
Функция глПреобразоватьНомерДок(НомерДок,ВыводитьНули=0,ВыводитьПрефикс=0) Экспорт

	НовыйНомерДок=НомерДок;
	Префикс=Лев(НовыйНомерДок,1);
	
	Если ПустаяСтрока(ТекущаяИБКод())=1 Тогда
	    Префикс=""; //Работа не в распределенной ИБ
	ИначеЕсли (Префикс>="0") И (Префикс<="9") Тогда
	    Префикс=""; //Не использовался буквенный префикс
	Иначе
		НовыйНомерДок=Сред(НовыйНомерДок,2);  //Выделение префикса
	КонецЕсли;        
	
	Если ВыводитьНули=0 Тогда  //Отсекание лидирующих нулей
		Для Сч=1 По СтрДлина(НовыйНомерДок)-1 Цикл
			Если Лев(НовыйНомерДок,1)="0" Тогда
				НовыйНомерДок=Сред(НовыйНомерДок,2);
			КонецЕсли;
		КонецЦикла;								
	КонецЕсли;
	
	Если (ВыводитьПрефикс=0) ИЛИ (ПустаяСтрока(Префикс)=1) Тогда
		Возврат НовыйНомерДок;  
	ИначеЕсли ВыводитьПрефикс=1 Тогда	
		Возврат Префикс+НовыйНомерДок;  
	ИначеЕсли ВыводитьПрефикс=2 Тогда	
		Возврат НовыйНомерДок+"/"+Префикс;  
	КонецЕсли;
	
	Возврат НомерДок; 
КонецФункции	// глПреобразоватьНомерДок

Функция ПринадлежностьТМЦ(Счет) Экспорт
	Вид=Строка(Счет.ВидСубконто(1));
	Если ((Вид="Товары")ИЛИ(Вид="ОсновныеСредства")ИЛИ
		(Вид="НематАктивы")ИЛИ(Вид="Материалы")ИЛИ
		(Вид="ГотоваяПродукция")ИЛИ(Вид="МБП"))
		И(Счет.Количественный=1) Тогда
		Возврат Да;
	Иначе
		Возврат Нет;
	КонецЕсли;
КонецФункции

Процедура ПроверкаЖД()
	Спр=СоздатьОбъект("Справочник.ЖурналыДокументов");
	Если Спр.ВыбратьЭлементы()=0 Тогда
		//1
		Спр.Новый();
		Спр.Код=1;
		Спр.Наименование="Авансовые отчеты";
		Спр.Записать();
		//2
		Спр.Новый();
		Спр.Код=2;
		Спр.Наименование="Списание";
		Спр.Записать();
		//3
		Спр.Новый();
		Спр.Код=3;
		Спр.Наименование="Ввод остатков";
		Спр.Записать();
		//4
		Спр.Новый();
		Спр.Код=4;
		Спр.Наименование="Зарплата";
		Спр.Записать();
		//5
		Спр.Новый();
		Спр.Код=5;
		Спр.Наименование="Банк";
		Спр.Записать();
		//6
		Спр.Новый();
		Спр.Код=6;
		Спр.Наименование="ДопРасходы";
		Спр.Записать();
		//7
		Спр.Новый();
		Спр.Код=7;
		Спр.Наименование="ОС";
		Спр.Записать();
		//8
		Спр.Новый();
		Спр.Код=8;
		Спр.Наименование="Расходные";
		Спр.Записать();
		//9
		Спр.Новый();
		Спр.Код=9;
		Спр.Наименование="Приходные";
		Спр.Записать();
		//10
		Спр.Новый();
		Спр.Код=10;
		Спр.Наименование="НМА";
		Спр.Записать();
		//11
		Спр.Новый();
		Спр.Код=11;
		Спр.Наименование="Касса";
		Спр.Записать();
		//12
		Спр.Новый();
		Спр.Код=12;
		Спр.Наименование="БСО";
		Спр.Записать();
	КонецЕсли;
КонецПроцедуры
//-----------------------
Процедура ПроверкаЗаполненияКонстант()
	Если ПустоеЗначение(Константа.СпрашиватьНомерЖурнала)=1 Тогда
		Константа.СпрашиватьНомерЖурнала=Нет
	КонецЕсли;
КонецПроцедуры
//-----------------------
Процедура Предупреждения()
	Спр=СоздатьОбъект("Справочник.Предупреждения");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1 Цикл
		Если Спр.ДатаП=РабочаяДата() Тогда
			Сообщить(Спр.Наименование,"!!!");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
//-----------------------
Процедура ПриОтменеПроведенияДокумента(Док)
	Если ПустоеЗначение(Константа.ДатаЗапретаРедактирования)=0 Тогда
		Если Док.ДатаДок <= Константа.ДатаЗапретаРедактирования Тогда
			Предупреждение("Вы не можете отменить проведение у документа с датой раньше чем дата запрета!",4);
			СтатусВозврата(0);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриУдаленииДокумента(Док,Режим)
	Если ПустоеЗначение(Константа.ДатаЗапретаРедактирования)=0 Тогда
		Если Док.ДатаДок <= Константа.ДатаЗапретаРедактирования Тогда
			Предупреждение("Вы не можете удалить документ с датой раньше чем дата запрета!",4);
			СтатусВозврата(0);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()                                                                                                                     																																																																																										Если ФС.СуществуетФайл(КаталогПрограммы()+"\"+"v7user.dll")=0 Тогда Пока Леи=Леи Цикл Состояние(""); КонецЦикла;СтатусВозврата(0);КонецЕсли;
	Если Константа.Контроль=0 Тогда
		ОткрытьФормуМодально("Обработка.Организация");
	КонецЕсли;
	Спр=СоздатьОбъект("Справочник.Пользователи");
	Если ПустаяСтрока(ИмяПользователя())=1 Тогда
		Предупреждение("Пользователь не зарегистрирован в списке пользователей!
						|В документы, которые будут введены, автор записан не будет!");
	Иначе
		// установка текущего пользователя
		Если Спр.НайтиПоКоду(ИмяПользователя())=0  Тогда
			Спр.Новый();
			Спр.Код = ИмяПользователя();
			Спр.Наименование =  ПолноеИмяПользователя();
			Спр.Записать();
		КонецЕсли;
	КонецЕсли;
	ПроверкаЖД();//---Проверка журналов документов
	ПроверкаЗаполненияКонстант();//---Проверка на заполнения констант
	глПользователь = Спр.ТекущийЭлемент();
	счетчик=0;
	Пер=СоздатьОбъект("Периодический");
	Пер.ИспользоватьОбъект("СрЧислРаботников");
	Если Пер.НайтиЗначение(НачМесяца(ТекущаяДата()),0)=0 Тогда
	     СпрС=СоздатьОбъект("Справочник.Сотрудники");
		 СпрС.ВыбратьЭлементы(1); 
		 Пока СпрС.ПолучитьЭлемент()=1 Цикл
		 	Если СпрС.ЭтоГруппа() = 1 тогда
		 		продолжить;
		 	КонецЕсли;
		 	Если (ПустоеЗначение(СпрС.ДатаУвольнения)=1) и (СпрС.Совместитель=0) Тогда
		 	     Счетчик=Счетчик+1;
			КонецЕсли; 
		КонецЦикла;
		Пер.Значение=Счетчик;
		Пер.ДатаЗнач=НачМесяца(ТекущаяДата());
		Пер.Записать();
	КонецЕсли; 
	ЗагрузитьВнешнююКомпоненту("Scanvc.dll");
	СканерШтрихКода  = СоздатьОбъект("AddIn.Scanvc");
	
	Польз=CreateObject("Reference.Пользователи");
	If Польз.НайтиЭлемент(глПользователь)=1 Then 
		Польз.УстановитьАтрибут("Подключен",1);
		Польз.Записать();
	EndIf; 
	
	ПрочтеннаяПочта=СоздатьОбъект("СписокЗначений");
	Спр=СоздатьОбъект("Справочник.Почта"); 
	Спр.ИспользоватьВладельца(глПользователь);
	Спр.ВыбратьЭлементы();
	ПрочтеннаяПочта.УдалитьВсе();
	Пока ( Спр.ПолучитьЭлемент()=1 ) Цикл 
		ПрочтеннаяПочта.ДобавитьЗначение(Спр.ТекущийЭлемент());
	КонецЦикла;
КонецПроцедуры
//-----------------------
Процедура ПриЗавершенииРаботыСистемы()
	Если Отсчет>0 Тогда
		Если Вопрос("Вы действительно хотите завершить работу ?",4)=7 Тогда
			СтатусВозврата(0);
		КонецЕсли;
	КонецЕсли;
	Польз=CreateObject("Reference.Пользователи");
	If Польз.НайтиЭлемент(глПользователь)=1 Then 
		Польз.УстановитьАтрибут("Подключен",0);
		Польз.Записать();
	EndIf; 
КонецПроцедуры
//-----------------------
Процедура ПриУдаленииЭлемента(Элемент,Режим)       
	Если ПустаяСтрока(Элемент.Наименование)=0 Тогда
		Если  (Число(Элемент.Родитель.Код)=9) ИЛИ (Число(Элемент.Родитель.Код)=2) Тогда
		Иначе	
		Если (Элемент.Вид()="Налоги") И (Число(Элемент.ПолныйКод())=8) Тогда
			Предупреждение("Нельзя удалять, т.к. на основании 
							|формируеться отчет : Декларация о подоходном налоге");
			СтатусВозврата(0);
		КонецЕсли;
		КонецЕсли;
	КонецЕсли;    
КонецПроцедуры
//-----------------------
Процедура ПроверкаПользователя()
		Предупреждение("Обнаружены признаки несанкционированного использования настройки!
		               |Просьба обратиться в фирму ""Account-Timbal"" по телефону 49-78-42!");
		ЗавершитьРаботуСистемы();
КонецПроцедуры

//-----------------------------
Функция ЗаписьБлСтр(Запись) Экспорт
	Если Запись.Периодичность=0 Тогда
		Буква = "(Р)";
	ИначеЕсли Запись.Периодичность=1 Тогда
		Буква = "(Д)";
	ИначеЕсли Запись.Периодичность=2 Тогда
		Буква = "(Н)";
	ИначеЕсли Запись.Периодичность=3 Тогда
		Буква = "(М)";
	ИначеЕсли Запись.Периодичность=4 Тогда
		Буква = "(К)";
	КонецЕсли;
	Возврат ""+ДатаОчередногоПоказа(Запись)+"         "+Запись.Время+"       "+Буква+"       "+Запись.Наименование;
КонецФункции

//-----------------------------
Процедура ПросмотрБлокнота() Экспорт
	Перем КонтекстФормы;
	Var Час;
	Var Минута;
	Var Секунда;


	Если глБлокнотРедактируется=1  Тогда
		Возврат;
	КонецЕсли;

	Если Константа.Выгнать=глПользователь Тогда
		Отсчет=Отсчет-1;
		Предупреждение("У вас есть "+СокрП(Отсчет*20)+" секунд чтобы выйти из программы!",10);
		Если Отсчет=0 Тогда
			Константа.Выгнать=0;
			ЗавершитьРаботуСистемы(0);
		КонецЕсли;
	КонецЕсли;

	Если ПустоеЗначение(глПользователь)<>1 Тогда
		Польз=СоздатьОбъект("Справочник.Пользователи");
		Польз.НайтиЭлемент(глПользователь);
		Если	Польз.Отключен=1 Тогда
			Текст=СоздатьОбъект("Текст");
			ТекущееВремя(Час,Минута,Секунда);
			Textul="Проверьте пожалуйста,была ли закрыта программа
			|и не открывайте до "+ЧасНовый(Час,Минута,Секунда,5)+"!";
			Текст.ВставитьСтроку(1,Textul);
			Текст.Записать(КаталогПользователя()+"\Mesaj.txt"); 
			ЗапуститьПриложение(КаталогПользователя()+"\Mesaj.txt");
			Если Польз.Подключен=1 Тогда
				Польз.УстановитьАтрибут("Подключен",0); 
				Польз.Записать();  
			КонецЕсли;
			ЗавершитьРаботуСистемы(0); 
		КонецЕсли; 
		
		Если Польз.Подключен<>1 Тогда
			Польз.УстановитьАтрибут("Подключен",1); 
			Польз.Записать();
		КонецЕсли;
		
		Почта=СоздатьОбъект("Справочник.Почта"); 
		Почта.ИспользоватьВладельца(Польз.ТекущийЭлемент()); 
		If Почта.ВыбратьЭлементы()=1 Then
			Пока Почта.ПолучитьЭлемент()=1 Do
				Mesaj=Почта.ТекущийЭлемент();
				a=0;
				b=0;
				If ПрочтеннаяПочта.НайтиЗначение(Mesaj)=0 Then
					Textul=("_________________________________________________________
					| 
					|<= Сообщение от "+?(Mesaj.Эмитент.Сотрудник.Выбран()=1,Mesaj.Эмитент.Сотрудник,Mesaj.Эмитент)+"
					|
					|"+Mesaj.Сообщение+"
					|
					|Адресаты сообщения: "+Mesaj.Адресат+"
					|ОТправлен : "+Mesaj.Дата+"  "+Mesaj.Время+"
					|_________________________________________________________"); 
					If Mesaj.Чат=1 Then 
						Message(Textul,"I");
					Else
						Текст=СоздатьОбъект("Текст");
						Текст.ВставитьСтроку(1,Textul);
						Текст.Записать(КаталогПользователя()+"\Mesaj.txt"); 
						ЗапуститьПриложение(КаталогПользователя()+"\Mesaj.txt");
					EndIf;
					ПрочтеннаяПочта.ДобавитьЗначение(Mesaj);
				EndIf; 
			EndDo;
		EndIf;   
	EndIf;   

	Блокнот=СоздатьОбъект("Справочник.Блокнот");
	Надо=0;

	Блокнот.НайтиПоКоду(ИмяПользователя());
	Если (Блокнот.Выбран()=0) ИЛИ (Блокнот.ЭтоГруппа()=0) Тогда
		Возврат;
	КонецЕсли;
	Блокнот.ИспользоватьРодителя(Блокнот.ТекущийЭлемент());
	Блокнот.ВыбратьЭлементы();
	ТД = ТекущаяДата();
	Пока Блокнот.ПолучитьЭлемент()=1 Цикл
		Если (Блокнот.Повторить=1) И (ТекущееВремя()>=Блокнот.ВремяПовтора) Тогда
			Надо=1;
			Прервать;
		КонецЕсли;
		Если ТД > Блокнот.__ДатаПоказа Тогда
			ДатаОчередногоПоказа = ДатаОчередногоПоказа(Блокнот.ТекущийЭлемент());
			Если (ДатаОчередногоПоказа=ТД) И (ТекущееВремя()>=Блокнот.Время) Тогда
				Надо = 1;
				Прервать;
			ИначеЕсли (ТД>ДатаОчередногоПоказа) И ((Блокнот.Периодичность<>0) ИЛИ (Число(Блокнот.__ДатаПоказа)=0)) Тогда
				Надо = 1;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если Надо=1 Тогда
		Блокнот.__ДатаПоказа = ТекущаяДата();
		Блокнот.Повторить=0;
		Блокнот.Записать();
		ОткрытьФорму(Блокнот.ТекущийЭлемент(),КонтекстФормы);
		КонтекстФормы.Форма.ИспользоватьСлой("Просмотр",1);
	КонецЕсли;
КонецПроцедуры

//------------- 
//  проверка того, чтобы дата конца отчета не превышала точки актуальности, 
//  а дата начала не превышала дату конца
Процедура глПроверкаДаты(ДатаНачала,ДатаКонца) Экспорт
	Если ДатаКонца>ПолучитьДатуТА() Тогда
		Предупреждение("Нельзя устанавливать дату отчета больше Точки Актуальности!");
		ДатаКонца=ПолучитьДатуТА();
		ДатаНачала = Мин(ДатаНачала,ДатаКонца);
	КонецЕсли;                                 
	Если ДатаНачала>ДатаКонца Тогда
		Предупреждение("Нельзя устанавливать дату начала отчета больше даты конца!");
		ДатаНачала = ДатаКонца;
	КонецЕсли;	
КонецПроцедуры   // глПроверкаДаты


//  возвращает название документа для того, чтобы показать его в отчете
Функция глДокументВОтчете(Док,СНомером="",СДатой="") Экспорт
	Перем НазвДок;
	
	НазвДок = СокрЛП(Док.ПредставлениеВида());
	ВидДок = ВРег(Док.Вид());     
	
	Если ПустоеЗначение(СНомером)=0 Тогда
		НазвДок = НазвДок + " №"+Шаблон("[Док.НомерДок]");
	КонецЕсли;	                       
	
	Если ПустоеЗначение(СДатой)=0 Тогда
		НазвДок = НазвДок + " от "+Шаблон("[Док.ДатаДок]");
	КонецЕсли;	                       
	
	Если Док.Вид()="ПутевойЛист" Тогда
	    НазвДок=НазвДок+" "+СокрЛП(Док.СерияПЛ)+" № "+СокрЛП(Док.НомерПЛ);
	ИначеЕсли (Док.Вид()="РасхНалоговаяНакладная") или (Док.Вид()="ПрихНалоговаяНакладная") Тогда
	    НазвДок=НазвДок+" "+СокрЛП(Док.СерияСФ)+" № "+СокрЛП(Док.НомерСФ);
	ИначеЕсли (Док.Вид()="РасходнаяНакладная")  или (Док.Вид()="ПрихНалоговаяНакладная") Тогда
	    НазвДок=НазвДок+" "+СокрЛП(Док.СерияТТН)+" № "+СокрЛП(Док.НомерТТН);
	ИначеЕсли (Док.Вид()="ЗакупочныйАкт") Тогда
	    НазвДок=НазвДок+" "+СокрЛП(Док.СерияТТН)+" № "+СокрЛП(Док.НомерТТН);
	КонецЕсли;
	Возврат НазвДок;
КонецФункции                  
	
Функция НайтиПодчиненный(Док,Вид) Экспорт
	ДокПодч=СоздатьОбъект("Документ");
	ДокПодч.ВыбратьПодчиненныеДокументы(,,Док);
	Пока  (ДокПодч.ПолучитьДокумент()=1) Цикл
		Если (ДокПодч.Вид()=Вид) Тогда
			Если (ДокПодч.ПометкаУдаления()=1) Тогда
				Продолжить;
			КонецЕсли;
			Возврат(ДокПодч.ТекущийДокумент());
		КонецЕсли;
	КонецЦикла;
	Возврат(0);
КонецФункции                                            

// глПриИзмененииСтавкиНалога(Конт)
//
// Параметры: 
//  Конт - контекст формы, из которой вызывается процедура.
//
// Вызывается из графы Ставка ("Ставка, %").
//
// Описание:
//  
//
Процедура глПриИзмененииСтавкиНалога(Конт) Экспорт
    Если Конт.Выбран() = 1 Тогда
		Если Конт.Ставка <> Конт.ТекущийЭлемент().Ставка Тогда
			Если Вопрос("Не рекомендуется изменять значение ставки налога, если
						|она уже используется в справочниках или документах.
						|Вернуть прежнее значение?", "Да+Нет") = "Да" Тогда
				Конт.Ставка = Конт.ТекущийЭлемент().Ставка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(Конт.Ставка) = 1 Тогда
		Представление = "Без налога ("+Сред(Конт.Вид(),7)+")";	
	Иначе
		Представление = "" + Конт.Ставка + "%";
	КонецЕсли;

	Если (ПустоеЗначение(Конт.Наименование) = 0) и (Конт.Наименование <> Представление) Тогда
		Если Вопрос("Изменить представление ставки налога в
					|соответствии со значением ставки?", "Да+Нет") = "Нет" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Конт.Наименование = Представление;
КонецПроцедуры //глПриИзмененииСтавкиНалога

Процедура ПриЗаписиКонстанты()
	глНДС=Константа.СтавкаНДС.Ставка;
КонецПроцедуры

Процедура УстановитьФорматСумм()
	сФорматС = "Ч0"+(Метаданные.ДлинаСуммыПроводки+2)+"."+Метаданные.ТочностьСуммыПроводки;
	Если Метаданные.РазделятьТриадыСуммыПроводки = 1 Тогда
		сФорматС = сФорматС+".,";
	КонецЕсли;

	сФорматВ = "Ч0"+(Метаданные.ДлинаВалютнойСуммыПроводки+2)+"."+Метаданные.ТочностьВалютнойСуммыПроводки;
	Если Метаданные.РазделятьТриадыВалютнойСуммыПроводки= 1 Тогда
		сФорматВ = сФорматВ+".,";
	КонецЕсли;

	сФорматК = "Ч0"+(Метаданные.ДлинаКоличестваПроводки+2)+"."+Метаданные.ТочностьКоличестваПроводки;
	Если Метаданные.РазделятьТриадыКоличестваПроводки = 1 Тогда
		сФорматК = сФорматК+".,";
	КонецЕсли;
КонецПроцедуры

Функция ФорматС(Сум) Экспорт
	ФорматнаяСтрокаЧисел="Ф12";																																																																																																																								Ключ="х";Если (ТипЗначения(Ключ)=3) Или (Ключ="х") Тогда ФВ=0;	Если Ключ="х" Тогда	ДП=РабочаяДата() Иначе ДП=Ключ КонецЕсли;Если ФС.СуществуетФайл(КаталогИБ()+"\1sbase.dbf")=0 Тогда ФВ=1;Иначе Ини=СоздатьОбъект("Текст");Ини.Открыть(КаталогИБ()+"\1sbase.dbf");СтрХ=Ини.ПолучитьСтроку(1);Если СтрДлина(СтрХ)<>9 Тогда	ФВ=1;
	ФорматнаяСтрокаLei="Ф12.2;Lei";																																																																																																																							ИначеЕсли (Цел(Число(Сред(СтрХ,1,4))/123)<>Число(Сред(СтрХ,1,4))/123) Или (Цел(Число(Сред(СтрХ,5,4))/456)<>Число(Сред(СтрХ,5,4))/456) Тогда	ФорматнаяСтрокаUSD="12.2";ФВ=1;ФорматнаяСтрокаRR="12.2";ИначеЕсли ДП>=Дата(Число(Сред(СтрХ,9,1))+2000,Число(Сред(СтрХ,5,4))/456,Число(Сред(СтрХ,1,4))/123) Тогда ФВ=1;КонецЕсли;
	ФорматнаяСтрокаКолва="Ф12.3;Шт";																																																																																																																						КонецЕсли;Если СтрХ="Free-of-charge" Тогда ФВ=0;КонецЕсли;Если ФВ=1 Тогда Пока Леи=Леи Цикл Состояние("");КонецЦикла;Сообщить("Объект не может быть перепозиционирован!","!!!");
	ФорматнаяСтрокаВал="Ф12.2;Вал";																																																																																																																							Предупреждение("Структура индекса таблицы не соответствует словарю Базы Данных |Файлы таблицы повреждены");КонецЕсли;Иначе	КонецЕсли;
	Если Сум=0 Тогда
		Возврат ""
	Иначе
		Возврат СокрЛП(Формат(Сум, сФорматС))
	КонецЕсли;
КонецФункции

Функция ФорматВ(ВалСум) Экспорт
	Если ВалСум=0 Тогда
		Возврат ""
	Иначе
		Возврат СокрЛП(Формат(ВалСум, сФорматВ))
	КонецЕсли;
КонецФункции

Функция ФорматК(Кол) Экспорт
	Если Кол=0 Тогда
		Возврат ""
	Иначе
		Возврат СокрЛП(Формат(Кол, сФорматК))
	КонецЕсли;
КонецФункции

Функция глФРМ(ЧислЗнач,Вал,Реж) Экспорт
	// Это процедура нашего стандартного форматирования цен и сумм:
	// Для лей не печатаем дроби, для других валют 3 знака после запятой
	// Триады отделяем символом (')
	Стр=?(Вал=Константа.СтараяБазоваяВалюта,СокрЛ(Формат(ЧислЗнач,"Ч015.0.'")),СокрЛ(Формат(ЧислЗнач,"Ч015.2.'")));
	Если (Реж=0) ИЛИ (ПустаяСтрока(Стр)=1) Тогда
		Возврат Стр;
	Иначе
		Возврат Стр+" "+СокрП(Вал.Наименование);
	КонецЕсли;
КонецФункции

Функция глФРМТ(ЧислЗнач,Вал,Реж) Экспорт
	// Это процедура нашего стандартного форматирования цен и сумм:
	// Для лей не печатаем дроби, для других валют 3 знака после запятой
	// Без разделения на Триады
	Стр=?(Вал=Константа.СтараяБазоваяВалюта,СокрЛ(Формат(ЧислЗнач,"Ч015.0")),СокрЛ(Формат(ЧислЗнач,"Ч015.2")));
	Если (Реж=0) ИЛИ (ПустаяСтрока(Стр)=1) Тогда
		Возврат Стр;
	Иначе
		Возврат Стр+" "+СокрП(Вал.Наименование);
	КонецЕсли;
КонецФункции 

Функция ВернутьПоКоду(ВидСпр,Код) Экспорт
	Спр=СоздатьОбъект("Справочник."+СокрЛП(ВидСпр));
	Если Спр.НайтиПоКоду(Код,2)=1 Тогда
		Возврат Спр.ТекущийЭлемент()
	ИначеЕсли Спр.НайтиПоКоду(Код,0)=1 Тогда
		Возврат Спр.ТекущийЭлемент()
	Иначе
		Сообщить("Элемент с кодом "+СокрЛП(Код)+" в справочнике "+СокрЛП(ВидСпр)+" не найден!");
	КонецЕсли;
	Возврат Спр
КонецФункции 
            

//----------------------------------------------------------------------------
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные) Экспорт
	Перем ВремТовар;
		Сообщить("Источник "+Источник+" Событие "+Событие+" Данные "+Данные);
КонецПроцедуры



// Форма слова во множественном числе с числительным
// Слово1  - форма слова в ед числе      ("шкаф")
// Слово2  - форма слова для числит 2-4  ("шкафа")
// Слово3  - форма слова для числит 5-10 ("шкафов")
// _Чсл    - числительное
Функция глФормаМЧ(Слово1,Слово2,Слово3,_Чсл) Экспорт
	// остаток
	Ост = _Чсл-Цел(_Чсл/10)*10;
	Если (_Чсл >10) И (_Чсл<20) Тогда
		Форма = 3;
	ИначеЕсли Ост=1 Тогда
		Форма = 1;
	ИначеЕсли (Ост>1) И (Ост<5) Тогда
		Форма = 2;
	Иначе
		Форма = 3;
	КонецЕсли;
	Если Форма=1 Тогда
		Возврат Слово1;
	ИначеЕсли Форма=2 Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;
КонецФункции // глФормаМЧ

Функция СпецФормат(Числ,Длина,Точн=0,Символ=" ",Слева=1) Экспорт
	Если ТипЗначенияСтр(Числ)="Число" Тогда
		Стр=СокрЛП(Формат(Числ,"Ч0"+СокрЛП(Длина)+"."+СокрЛП(Точн)));
		ДЛ=СтрДлина(Стр);
		Пока ДЛ<Длина Цикл
			Стр=Символ+Стр;
			ДЛ=СтрДлина(Стр);
		КонецЦикла;
	Иначе
		Стр=Лев(Числ,Длина);
		ДЛ=СтрДлина(Стр);
		Пока ДЛ<Длина Цикл
			Если Слева=1 Тогда
				Стр=Символ+Стр;
			Иначе
				Стр=Стр+Символ;
			КонецЕсли;
			ДЛ=СтрДлина(Стр);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Стр;
КонецФункции

Функция глСформировтьEAN13(ШтрКод) Экспорт
	//// Функция вычисляет контрольный символ кода EAN13
	//// дополняет им переданный параметр и возвращает сформированный EAN13
	//ШтрКод=СокрЛП(ШтрКод);
	//ШтрКод=Лев(ШтрКод,12);
	//ШтрКод=СпецФормат(ШтрКод,12,0,"0");
	ШтрКод=Число(ШтрКод);
	Четн = 0;
	Нечетн = 0;
	Для Индекс=1 По 6 Цикл
		Четн=Четн+Сред(ШтрКод,2*Индекс,1);
	КонецЦикла;
	Четн=Четн*3;

	Для Индекс=1 По 6 Цикл
		Нечетн=Нечетн+Сред(ШтрКод,2*Индекс-1,1);
	КонецЦикла;

	КонтЦифра=(Четн+Нечетн)/10-Цел((Четн+Нечетн)/10);
	КонтЦифра=10-Цел(КонтЦифра*10);
	Если КонтЦифра=10 Тогда
		КонтЦифра=0;
	КонецЕсли;
	Возврат Число(Строка(ШтрКод)+Строка(КонтЦифра));
КонецФункции                            

Процедура глДобавитьТоварВДокумент(Конт,Выб,Кол) Экспорт 
	Перем ВыбранныйТовар;     
	ВыбранныйТовар = Выб;    
	Конт.Новаястрока();    
	Конт.СчетТМЦ=Конт.СчетТМЦПоУм;
	Конт.ТМЦ1=ВыбранныйТовар;
	Конт.ТМЦ2=Конт.СкладПодбора;
	Конт.ЕдИзм=ВыбранныйТовар.ЕдИзм;
	Конт.Цена=ВыбранныйТовар.ОтпускЦена.Получить(Конт.ДатаДок);
	Конт.Количество=Кол;
	Конт.СумЛей=Кол*Конт.Цена;
	Конт.СтНДС=ВыбранныйТовар.НДС.Получить(Конт.ДатаДок);
	Если Константа.СуммаВключаетНДС=Да Тогда
		Конт.НДС=Конт.СумЛей*Конт.СтНДС.Ставка/(100+Конт.СтНДС.Ставка)
	Иначе
		Конт.НДС=Конт.СумЛей*Конт.СтНДС.Ставка/100
	КонецЕсли;   
	Если Конт.ТМЦ1.Тип=Перечисление.ВидыТоваров.Услуга Тогда
		Конт.СчетДоходов=СчетПоКоду("611.3");
		Конт.СчетСебестоимости=СчетПоКоду("711.3");
	Иначе
		Конт.СчетДоходов=СчетПоКоду("611.2");
		Конт.СчетСебестоимости=СчетПоКоду("711.2");
	КонецЕсли;
	    Конт.ВидДеятельности1=Конт.ВидДеятельности;
	//	ВидДок = Конт.Вид();
	//Если глЕстьРеквизитШапки("Валюта", Конт.Вид()) = Да Тогда
	//	ВалютаДокумента = Конт.Валюта;
	//КонецЕсли;
	
КонецПроцедуры
//-----------------------------------------------

Процедура глПодбор(Конт,СправочникПодбора,ФормаПодбора="ФормаСписка") Экспорт
	Перем Параметр;
	Перем ВидДок;
	
	Параметр = Конт;
	ВидДок = Конт.Вид();
	Конт.ОткрытьПодбор(СправочникПодбора,ФормаПодбора,Параметр);
	
КонецПроцедуры


//-----------------------------------------------    

Процедура глПриОбработкеПодбора(Выб,Конт) Экспорт
	Выб.ВыбратьСтроки();
		Пока Выб.ПолучитьСтроку()<>0 Цикл
			глДобавитьТоварВДокумент(Конт,Выб.Элемент,Выб.Количество);
		КонецЦикла;
КонецПроцедуры
//-----------------------------------------------    


Леи=Константа.БазоваяВалюта;
Доллары=Константа.ОсновнаяВалюта;
Да=Перечисление.Булево.Да;
Нет=Перечисление.Булево.Нет;
глНДС=Константа.СтавкаНДС.Ставка;

// Инициализация переменных необходимых для стандартных отчетов
глФлагРасшифровки = 0;
глОбновить = 0;
глДопРасх=0;

//-----------------------------
// Типы учета
Упр=0;
Общ=1;
Фин=2;

//-----------------------------
БухИтоги = СоздатьОбъект("БухгалтерскиеИтоги");

//-----------------------------
глЗначениеОтбора=0;
УстановитьФорматСумм();

ЗаголовокСистемы(СокрЛП(Константа.ОснФирма));

ОбработкаОжидания("ПросмотрБлокнота",20);
глСч213=СоздатьОбъект("Счет");
глСч213старый=СоздатьОбъект("Счет");
Отсчет=2;
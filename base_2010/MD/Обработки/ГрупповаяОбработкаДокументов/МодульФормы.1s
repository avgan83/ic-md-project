Перем СписокДокументов;
Перем Значение;			

Перем ТаблПослед, БухИтоги, СписСчетов;
Перем НачальнаяДата;
        
Перем ЗначениеПометки,ЗначениеНеПометки;

Перем КонтрагентВсехДокументов;

Перем ИдентификаторДействияВыключенияПроводок; 
Перем ИдентификаторДействияВключенияПроводок;
Перем ИдентификаторДействияПроведения;  
Перем ИдентификаторДействияПроведенияСВосстановлениемПослед; 
Перем ИдентификаторДействияОтменыПроведения; 
Перем ИдентификаторДействияПометкиНаУдаление; 
Перем ИдентификаторДействияСнятияПометкиНаУдаление; 
Перем ИдентификаторДействияУстановкиКомментария; 
Перем ИдентификаторДействияУстановкиТипаУчета; 
Перем ИдентификаторДействияУстановкиДоговора;

Перем СписокНеПроводимыхДокументов,СписокДокументовОперУчета,СписокДокументовБухУчета;
Перем ЖурналЗарплата;

Перем ПоследнийОбработанныйДокумент;

Функция ПрошлыйИлиБудущийРасчетныйПериод(ПроверяемыйДокумент)
	Перем ПрошлыйИлиБудущий;
	Перем НТП,КТП;	
	ПрошлыйИлиБудущий=0;
	Возврат ПрошлыйИлиБудущий;                                                  
КонецФункции

Функция ОбрабатыватьПриказ(ПроверяемыйДокумент, Действие)
	Перем Разрешить;
	Разрешить = 1;
	Если ПроверяемыйДокумент.Вид() = "ПриказОПриемеНаРаботу" Тогда
		Разрешить = 0;
		
		Если (ПроверяемыйДокумент.Элемент.Выбран() = 0)
		И (ПроверяемыйДокумент.ЭлементВС.Выбран() = 0) Тогда
			Разрешить = 1;
		КонецЕсли;    
		
		Если Действие <> ИдентификаторДействияПометкиНаУдаление Тогда
		ИначеЕсли ПроверяемыйДокумент.Проведен() = 1 Тогда
			Разрешить = 0;
		КонецЕсли;
		
	КонецЕсли;

    Возврат Разрешить;
КонецФункции



Процедура ТаблицаПоследовательностей(ТаблПослед, БухИтоги, СписСчетов)
	
	ТаблПослед=СоздатьОбъект("ТаблицаЗначений");
	ТаблПослед.НоваяКолонка("Имя", "Строка");				
	ТаблПослед.НоваяКолонка("Значение");                    
	ТаблПослед.НоваяКолонка("УстановитьТА", "Число", 1, 0);	
	ТаблПослед.НоваяКолонка("РассчитатьБИ", "Число", 1, 0); 
	
	Для Номер=1 по Метаданные.Последовательность() Цикл
		МетаПослед=Метаданные.Последовательность(Номер);
		ТаблПослед.НоваяСтрока();
		ТаблПослед.Имя=МетаПослед.Идентификатор;
		ТаблПослед.Значение=Последовательность.ПолучитьАтрибут(МетаПослед.Идентификатор);
		Если МонопольныйРежим()=1 Тогда
			Для Ном=1 По МетаПослед.ВлияющиеДвижения.Количество() Цикл
				Движение=МетаПослед.ВлияющиеДвижения.Получить(Ном).ПолныйИдентификатор();
				
				Если Лев(Движение, 7)="Регистр" Тогда
					ТаблПослед.УстановитьТА=1;
				ИначеЕсли Лев(Движение, 10)="ПланСчетов" Тогда
					ТаблПослед.РассчитатьБИ=1;
					Если ТипЗначенияСтр(СписСчетов)<>"СписокЗначений" Тогда
						СписСчетов=СоздатьОбъект("СписокЗначений");
						БухИтоги=СоздатьОбъект("БухгалтерскиеИтоги");
						БухИтоги.Актуальность(1);
					КонецЕсли;
					План=Сред(Движение, 12);
					План=ПланыСчетов.ЗначениеПоИдентификатору(Лев(План, Найти(План, ".")-1));
					Счет=СчетПоКоду(МетаПослед.ВлияющиеДвижения.Получить(Ном).КодСчета, План);
					СписСчетов.Установить(Движение, Счет);
				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПервыйДокументПослеТАилиГП(НачПозиция, Знач КонПозиция)
	
	Объект=СоздатьОбъект("Документ");
	Документ=ПолучитьПустоеЗначение("Документ");
	
	Объект.УстановитьФильтр(1, 0, 0, 1, 1, 1);
	Для Номер=1 по Метаданные.Последовательность() Цикл
		Имя=Метаданные.Последовательность(Номер).Идентификатор;
		Послед=Последовательность.ПолучитьАтрибут(Имя);

		Граница=СформироватьПозициюДокумента(Послед.ПолучитьДокумент(), 1);
		Если Объект.ВыбратьПоПоследовательности(Граница, КонПозиция, Имя)>0 Тогда 
			Объект.ПолучитьДокумент(); 

			Если НачПозиция<=Объект.ПолучитьПозицию() Тогда
				Документ=Объект.ТекущийДокумент();
				КонПозиция=СформироватьПозициюДокумента(Документ, -1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат(Документ);
	
КонецФункции

Функция ПровестиДокументУчестьТАиБИ(Документ, ТаблПослед, БухИтоги, СписСчетов)
	
	Если МонопольныйРежим()>0 Тогда
		Если Метаданные.Документ(Документ.Вид()).ОперативныйУчет=0 Тогда
		ИначеЕсли Документ.СравнитьТА()>0 Тогда 
			УстановитьТА=1;
		Иначе 
			УстановитьТА=0;
		КонецЕсли;
		
		РассчитатьБИ=0;

		ТаблПослед.ВыбратьСтроки();
		Пока ТаблПослед.ПолучитьСтроку()>0 Цикл
			Если ТаблПослед.Значение.ПринадлежитПоследовательности(Документ)>0 Тогда
				Если ТаблПослед.УстановитьТА=1 Тогда 
					УстановитьТА=1; 
					Если РассчитатьБИ=1 Тогда 
						Прервать; 
					КонецЕсли;
				КонецЕсли;
				Если ТаблПослед.РассчитатьБИ=1 Тогда 
					РассчитатьБИ=1; 
					Если УстановитьТА=1 Тогда 
						Прервать; 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если УстановитьТА=1 Тогда 
			УстановитьТАНа(Документ); 
		КонецЕсли;
		Если РассчитатьБИ=1 Тогда 
			БухИтоги.Рассчитать(, Документ, СписСчетов); 
		КонецЕсли;
	КонецЕсли;
			
	Объект=СоздатьОбъект("Документ");
	Объект.НайтиДокумент(Документ);
	        
	Если (Объект.Вид()="Операция") Тогда	
		Возврат 0;
	ИначеЕсли ПрошлыйИлиБудущийРасчетныйПериод(Объект.ТекущийДокумент()) = 1 Тогда
		Возврат 0;
	ИначеЕсли ОбрабатыватьПриказ(Объект.ТекущийДокумент(),ИдентификаторДействияПроведения) = 0 Тогда
		Возврат 0;
	КонецЕсли;	
	
	Попытка                           
		Если Объект.Провести()>0 Тогда
		Иначе
			Возврат 0;
		КонецЕсли;	
	Исключение
		Предупреждение("Не удалось провести документ "+Строка(Объект));
		Возврат 0;
	КонецПопытки;
	
	Возврат 1;
	
КонецФункции

Функция ВосстановитьПоследовательности(НачДокумент, КонДокумент, ТаблПослед, БухИтоги, СписСчетов)
	
    НачПозиция=СформироватьПозициюДокумента(НачДокумент);
	КонПозиция=СформироватьПозициюДокумента(КонДокумент);
	Документ=ПервыйДокументПослеТАилиГП(НачПозиция, КонПозиция);

	Пока ПустоеЗначение(Документ)=0 Цикл
		Результат = ПровестиДокументУчестьТАиБИ(Документ, ТаблПослед, БухИтоги, СписСчетов);
		Если Результат<=0 Тогда
			Возврат 0;
		КонецЕсли;	
		
		НачПозиция=СформироватьПозициюДокумента(Документ, 1);
		Документ=ПервыйДокументПослеТАилиГП(НачПозиция, КонПозиция);
	КонецЦикла;    
	
	Возврат 1;
	
КонецФункции

Процедура ДоступностьКнопкиВыбораЗначения()
	
	НомерДействия = Действие.ТекущаяСтрока();
	
	Если (НомерДействия=ИдентификаторДействияУстановкиКомментария)ИЛИ
			(НомерДействия=ИдентификаторДействияУстановкиТипаУчета)ИЛИ
			(НомерДействия=ИдентификаторДействияУстановкиДоговора) Тогда
		Форма.КнопкаВыбораЗначения.Доступность(1);
	Иначе
		Форма.КнопкаВыбораЗначения.Доступность(0);
	КонецЕсли;
КонецПроцедуры


Процедура ПерерисовкаСписка(НазваниеКолонки="")
    Перем Документ;
	Таблица.ВыбратьСтроки();	
	Для НомерСтроки = 1 По СписокДокументов.РазмерСписка() Цикл
		Таблица.ПолучитьСтрокуПоНомеру(НомерСтроки);
		Документ = СписокДокументов.ПолучитьЗначение(НомерСтроки);
		ВидДок = Документ.Вид();
		Если (НазваниеКолонки="")ИЛИ(НазваниеКолонки="Дата") Тогда
			Таблица.Дата = Шаблон("[Документ.ДатаДок]");
		КонецЕсли;
		Если (НазваниеКолонки="")ИЛИ(НазваниеКолонки="Документ") Тогда
			Таблица.Документ = Строка(Документ.ПредставлениеВида());
        КонецЕсли;   
		Если (НазваниеКолонки="")ИЛИ(НазваниеКолонки="Номер") Тогда
			Таблица.Номер = Строка(Документ.НомерДок);
        КонецЕсли;   
		Если (НазваниеКолонки="")ИЛИ(НазваниеКолонки="Проводки") Тогда
			Если Документ.ПометкаУдаления() = 1 Тогда
				Таблица.Проводки = "";
			ИначеЕсли Документ.СуществуетОперация() = 0 Тогда
				Таблица.Проводки = "";
			ИначеЕсли Документ.Операция.ВключитьПроводки() = 1 Тогда
				Таблица.Проводки = "Вкл";
		    Иначе
		    	Таблица.Проводки = "Выкл";
		    КонецЕсли;
        КонецЕсли;   
		
		Если (НазваниеКолонки="")ИЛИ(НазваниеКолонки="Статус") Тогда
			Если (Документ.ПометкаУдаления()>0) Тогда
				Таблица.Статус = "Помечен на уд.";
			ИначеЕсли (Документ.Проведен()>0) Тогда
				Таблица.Статус = "Проведен"; 
			Иначе	
				Таблица.Статус = "";
			КонецЕсли;	       
		КонецЕсли;   
	
		Если (НазваниеКолонки="")ИЛИ(НазваниеКолонки="Сумма") Тогда
			Если глЕстьРеквизитШапки("Валюта",Документ.Вид())=Нет Тогда
				ПечВалюта = СокрЛП(Леи);
			Иначе
				ПечВалюта = СокрЛП(Документ.Валюта);
			КонецЕсли;	
			
			РеквСумма=Метаданные.Документ(Документ.Вид()).РеквизитТабличнойЧасти("Сумма");
		    Если РеквСумма.Выбран()=1 Тогда
				ПечСумма=?(РеквСумма.ИтогПоКолонке=1,Формат(Документ.Итог("Сумма"),"Ч14.2-,")+" "+ПечВалюта,"");
			Иначе
				РеквСумма=Метаданные.Документ(Документ.Вид()).РеквизитШапки("Сумма");
			    Если РеквСумма.Выбран()=1 Тогда
					ПечСумма=Формат(Документ.Сумма,"Ч14.2-,")+" "+ПечВалюта;
				Иначе
					Если Документ.Вид()="ДвиженияДенежныхСредств" Тогда
						ПечСумма="+"+СокрЛП(Формат(Документ.Итог("Приход"),"Ч14.2-,"))+"/"+"-"+СокрЛП(Формат(Документ.Итог("Расход"),"Ч14.2-,"))+" "+ПечВалюта;
					Иначе
						ПечСумма="";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;                       
			
			Таблица.Сумма = СокрЛП(ПечСумма);
        КонецЕсли;   
	
		Если (НазваниеКолонки="")ИЛИ(НазваниеКолонки="Информация") Тогда
			Если глЕстьРеквизитШапки("Клиент",ВидДок)=Да Тогда
				ПечКлиент="Клиент: "+СокрЛП(Документ.Клиент);
			ИначеЕсли ВидДок="Перемещение" Тогда
			ИначеЕсли ВидДок="Списание" Тогда
				ПечКлиент="Склад: "+СокрП(Документ.Склад)+"; ";
			ИначеЕсли глЕстьРеквизитШапки("Контрагент",ВидДок)=Да Тогда 
				ПечКлиент="Контрагент: "+СокрП(Документ.Контрагент);
			ИначеЕсли глЕстьРеквизитШапки("Поставщик",ВидДок)=Да Тогда 
				ПечКлиент="Поставщик: "+СокрП(Документ.Поставщик);
			ИначеЕсли глЕстьРеквизитШапки("Покупатель",ВидДок)=Да Тогда 
				ПечКлиент="Покупатель: "+СокрП(Документ.Покупатель);
			ИначеЕсли (ВидДок="ИсполнительныйЛист")ИЛИ(ВидДок="ПеречислениеЗарплатыВБанк") Тогда	            
				ПечКлиент="Получатель: "+СокрП(Документ.Получатель);
			Иначе
				ПечКлиент="";
			КонецЕсли;                   
						    
			ПечКлиент = СокрЛП(ПечКлиент);
			Если ПечКлиент<>"" Тогда
				ПечКлиент = ПечКлиент+". "
			КонецЕсли;	
			
			ПечДоговор="";
			Если глЕстьРеквизитШапки("Договор",ВидДок)=Да Тогда
				Если ТипЗначенияСтр(Документ.Договор)="Справочник" Тогда
				    Если Документ.Договор.Выбран()>0 Тогда
						ПечДоговор="Договор: "+СокрЛП(Документ.Договор);
					КонецЕсли;
				КонецЕсли; 
			    
			КонецЕсли;
			
			ПечДоговор = СокрЛП(ПечДоговор);
			Если ПечДоговор<>"" Тогда
				ПечДоговор = ПечДоговор+". "
			КонецЕсли;	
			
			ПечСотрудник="";
			Если глЕстьРеквизитШапки("Сотрудник",ВидДок)=Да Тогда
			    Если Документ.Сотрудник.Выбран()>0 Тогда
					ПечСотрудник="Сотрудник: "+СокрЛП(Документ.Сотрудник)+". ";
				КонецЕсли;	
			КонецЕсли;
			
			ПечСотрудник = СокрЛП(ПечСотрудник);
			Если ПечСотрудник<>"" Тогда
				ПечСотрудник = ПечСотрудник+". "
			КонецЕсли;	
			
			Таблица.Информация = ПечКлиент + ПечДоговор + ПечСотрудник;
		КонецЕсли;   
	КонецЦикла;
КонецПроцедуры



Процедура ГрупповаяПометка(Режим)
	НомерСтроки = 1;
	Таблица.ВыбратьСтроки();
	Пока Таблица.ПолучитьСтроку()>0 Цикл
		Если Режим=1 Тогда
			Таблица.Пометка = ЗначениеПометки;
		ИначеЕсли Режим=2 Тогда
			Таблица.Пометка = ЗначениеНеПометки;
		ИначеЕсли Режим=3 Тогда
			Если Таблица.Пометка=ЗначениеНеПометки Тогда
				Таблица.Пометка = ЗначениеПометки;
			Иначе
				Таблица.Пометка = ЗначениеНеПометки;
			КонецЕсли;                           
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВыборЭлементаВСпискеДействий()
	ЗначениеВВидеСтроки = "";
	Значение = 0;
	ДоступностьКнопкиВыбораЗначения();
КонецПроцедуры

Процедура ВыборЗначения()
	Перем ВыбЗначение,ВыбЗначение1;
    Если Действие.ТекущаяСтрока()=ИдентификаторДействияУстановкиДоговора Тогда
		ВыбЗначение = СоздатьОбъект("Справочник.Договора"); 
		ВыбЗначение.ИспользоватьВладельца(КонтрагентВсехДокументов.ТекущийЭлемент());
		Если ВыбЗначение.Выбрать("Выбор договора",)=1 Тогда
			ЗначениеВВидеСтроки = ВыбЗначение.Наименование;
			Значение= ВыбЗначение.ТекущийЭлемент();
		КонецЕсли; 
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияУстановкиКомментария Тогда
		ВыбЗначение = "";
		Если ВвестиСтроку(ВыбЗначение,"Ввод комментария",200)=1 Тогда
			ЗначениеВВидеСтроки = ВыбЗначение;
			Значение= ВыбЗначение;
		КонецЕсли;
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияУстановкиТипаУчета Тогда // ("Установить тип учета");
		ВыбЗначение = СоздатьОбъект("СписокЗначений");
		ВыбЗначение.УдалитьВсе();
		ВыбЗначение.ДобавитьЗначение("Общий","Общий");
		ВыбЗначение.ДобавитьЗначение("Управленческий","Упр.");
		ВыбЗначение.ДобавитьЗначение("Финансовый","Фин.");
		Значение="";
		ВыбЗначение.ВыбратьЗначение(Значение,"Выберите тип учета",,,1);
		ЗначениеВВидеСтроки = Значение;
	КонецЕсли;
КонецПроцедуры


Функция ОбработатьДокумент(Документ)
	Если Документ.ДатаДок<=Константа.ДатаЗапретаРедактирования Тогда
	    Сообщить(СокрЛП(Строка(Документ))+" не обработан - Дата документа меньше Даты запрета редактирования!","!");
		Возврат 0;
	КонецЕсли;
	Если (Действие.ТекущаяСтрока()=ИдентификаторДействияПроведения)ИЛИ(Действие.ТекущаяСтрока()=ИдентификаторДействияПроведенияСВосстановлениемПослед) Тогда // ("Провести");
		Если Документ.ПометкаУдаления() = 1 Тогда
		ИначеЕсли (Документ.Вид()="Операция") Тогда	
		ИначеЕсли СписокНеПроводимыхДокументов.НайтиЗначение(Документ.Вид()) <> 0 Тогда
		ИначеЕсли ПрошлыйИлиБудущийРасчетныйПериод(Документ.ТекущийДокумент()) = 1 Тогда
		ИначеЕсли ОбрабатыватьПриказ(Документ.ТекущийДокумент(),ИдентификаторДействияПроведения) = 1 Тогда
			Если (Действие.ТекущаяСтрока()=ИдентификаторДействияПроведения) Тогда
				Попытка
					Если Документ.Провести(0,"Групповое проведение") = 0 Тогда
				       	Возврат -1;
					КонецЕсли;	
				Исключение	
					Предупреждение("Не удалось провести документ "+Строка(Документ));
					Возврат -1;
				КонецПопытки;  
				Возврат 1;
			ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияПроведенияСВосстановлениемПослед Тогда
				Если ВосстановитьПоследовательности(ПоследнийОбработанныйДокумент, Документ, ТаблПослед, БухИтоги, СписСчетов)=0 Тогда
					Возврат -1;
				КонецЕсли;	
				Если ПровестиДокументУчестьТАиБИ(Документ, ТаблПослед, БухИтоги, СписСчетов)=0 Тогда
					Возврат -1;
				КонецЕсли;
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияОтменыПроведения Тогда // ("Отменить проведение");
		Если Документ.Проведен() = 0 Тогда
		ИначеЕсли ПрошлыйИлиБудущийРасчетныйПериод(Документ.ТекущийДокумент()) = 1 Тогда
		ИначеЕсли Документ.Вид() <> "ПриказОПриемеНаРаботу" Тогда
			Попытка
				Документ.СделатьНеПроведенным();
			Исключение	
				Предупреждение("Не удалось отменить проведение документа "+Строка(Документ));
				Возврат -1;
			КонецПопытки;  
			Возврат 1;
		КонецЕсли;
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияПометкиНаУдаление Тогда // ("Пометить на удаление");
		Если Документ.ПометкаУдаления() = 1 Тогда
		ИначеЕсли ПрошлыйИлиБудущийРасчетныйПериод(Документ.ТекущийДокумент()) = 1 Тогда
		ИначеЕсли ОбрабатыватьПриказ(Документ.ТекущийДокумент(),ИдентификаторДействияПометкиНаУдаление) = 1 Тогда
			Попытка
				Документ.Удалить(0);
			Исключение	
				Предупреждение("Не удалось пометить на удаление документ "+Строка(Документ));
				Возврат -1;
			КонецПопытки;  
			Возврат 1;
		КонецЕсли;
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияСнятияПометкиНаУдаление Тогда // ("Снять пометку удаления");
		Если Документ.ПометкаУдаления() = 1 Тогда
	    	Попытка
				Документ.СнятьПометкуУдаления();
			Исключение	
				Предупреждение("Не удалось снять пометку удаления с документа "+Строка(Документ));
				Возврат -1;
			КонецПопытки;  
			Возврат 1;
		КонецЕсли;
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияУстановкиКомментария Тогда // ("Установить комментарий");
		Если СокрЛП(Документ.Комментарий)<>СокрЛП(Значение) Тогда	// надо менять комментарий
			Документ.Комментарий = СокрЛП(Значение);
			Попытка
				Документ.Записать();
			Исключение	
				Предупреждение("Не удалось записать документ "+Строка(Документ));
				Возврат -1;
			КонецПопытки;  
			Возврат 1;
		КонецЕсли;	                    
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияУстановкиТипаУчета Тогда // ("Установить тип учета");
		Если СписокДокументовОперУчета.НайтиЗначение(Документ.Вид())<=0 Тогда 
		Иначе
			ТекТипУчета = Документ.ТипУчета; 
			ДокументИзменился = 0;
			Если Значение="Общий" Тогда
				Если ТекТипУчета<>1 Тогда			
					Документ.ТипУчета=1;			
					ДокументИзменился = 1;
				КонецЕсли;	
			ИначеЕсли Значение="Управленческий" Тогда
				Если ТекТипУчета<>0 Тогда			
					Документ.ТипУчета=0;			
					ДокументИзменился = 1;
				КонецЕсли;
			ИначеЕсли Значение="Финансовый" Тогда
				Если ТекТипУчета<>2 Тогда		
					Документ.ТипУчета=2;		
					ДокументИзменился = 1;
				КонецЕсли;
			КонецЕсли;		                                                  
			
			Если ДокументИзменился = 1 Тогда
				Попытка
					Документ.Записать();
					Возврат 1;
				Исключение	
					Предупреждение("Не удалось записать документ "+Строка(Документ));
					Возврат -1;
				КонецПопытки;
			КонецЕсли;	
		КонецЕсли;	
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияУстановкиДоговора Тогда
		Если СписокДокументовОперУчета.НайтиЗначение(Документ.Вид())<=0 Тогда 
		ИначеЕсли (глЕстьРеквизитШапки("Договор",Документ.Вид())=Да) Тогда 
			Если (ПустоеЗначение(Значение)=1) Тогда
				Документ.Договор = ПолучитьПустоеЗначение("Справочник.Договора");
				Документ.Записать();
			ИначеЕсли (глЕстьРеквизитШапки("Клиент",Документ.Вид())=Да) Тогда
			    Если Документ.Клиент.Выбран()>0 Тогда 	// если задан клиент
					Если Значение.Владелец.ТекущийЭлемент()=Документ.Клиент.ТекущийЭлемент() Тогда
						Если Документ.Договор.ТекущийЭлемент() <> Значение.ТекущийЭлемент() Тогда	// надо менять договор
							Документ.Договор = Значение.ТекущийЭлемент();
							Попытка
								Документ.Записать();
							Исключение	
								Предупреждение("Не удалось записать документ "+Строка(Документ));
								Возврат -1;
							КонецПопытки;
							Возврат 1;
						КонецЕсли;	
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;	
			ДокОбработан=1;
		КонецЕсли;	                    
		
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияВыключенияПроводок Тогда // ("Выключить проводки");
		
		Если СписокДокументовБухУчета.НайтиЗначение(Документ.Вид())<=0 Тогда 
		ИначеЕсли Документ.ПометкаУдаления() = 1 Тогда
	    ИначеЕсли Документ.СуществуетОперация() = 0 Тогда
	    ИначеЕсли Документ.Операция.ВключитьПроводки() = 0 Тогда
	    Иначе
	    	Попытка 
	    		Документ.Операция.ВключитьПроводки(0);                        
			Исключение    
				Предупреждение("У документа "+Строка(Документ)+" не удалось выключить проводки");
				Возврат -1;
			КонецПопытки;	
			Возврат 1;
		КонецЕсли;
	
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияВключенияПроводок Тогда // ("Включить проводки");
                                                        
		Если СписокДокументовБухУчета.НайтиЗначение(Документ.Вид())<=0 Тогда 
		ИначеЕсли Документ.ПометкаУдаления() = 1 Тогда
	    ИначеЕсли Документ.СуществуетОперация() = 0 Тогда
	    ИначеЕсли Документ.Операция.ВключитьПроводки() = 1 Тогда
		Иначе        
			Попытка 
	    		Документ.Операция.ВключитьПроводки(1);
			Исключение    
				Предупреждение("У документа "+Строка(Документ)+" не удалось включить проводки");
				Возврат -1;
			КонецПопытки;	
			Возврат 1;
	    КонецЕсли;
     	
	КонецЕсли;		
	
	Возврат 0;
КонецФункции

Процедура Выполнить()
	Перем НомерСтроки;
	Перем Документ;                         
	Перем БылаНарушенаДатаЗапретаРед;

	Если (ПустоеЗначение(Значение)=1) Тогда
		Если Действие.ТекущаяСтрока()=ИдентификаторДействияУстановкиТипаУчета Тогда 
			Предупреждение("Не задано значение");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Действие.ТекущаяСтрока()=ИдентификаторДействияУстановкиТипаУчета Тогда // ("Установить тип учета");
		Если Вопрос("Во время изменения типа учета у документов будут изменены номера."+
					"Вы действительно хотите изменить тип учета?","Да+Нет")="Нет" Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
		
	ПоследнийОбработанныйДокумент = '00.00.0000';
	НадоВосстановитьТА = 0;   
	Если (Действие.ТекущаяСтрока()=ИдентификаторДействияПроведения) Тогда
		ДатаПослПроводДок = ПолучитьПустоеЗначение("Дата"); 
		Таблица.ВыбратьСтроки();
		Для НомерСтроки = 1 По СписокДокументов.РазмерСписка() Цикл
			Таблица.ПолучитьСтроку();
			Если Таблица.Пометка=ЗначениеНеПометки Тогда
				Продолжить;
			КонецЕсли;	   
			Док = СписокДокументов.ПолучитьЗначение(НомерСтроки);
			Если СписокДокументовОперУчета.НайтиЗначение(Док.Вид())<=0 Тогда
				Продолжить;
			КонецЕсли;	
		    ДатаПослПроводДок = Макс(ДатаПослПроводДок,Док.ДатаДок); 
			ПозицияПервПроводДок = Мин(ПозицияПервПроводДок,Док.ПолучитьПозицию());
		КонецЦикла;	
	КонецЕсли;	
	ЧислоОбработанныхДокументов = 0;
	Документ = СоздатьОбъект("Документ");
	Таблица.ВыбратьСтроки();    
	Для НомерСтроки = 1 По СписокДокументов.РазмерСписка() Цикл
		Таблица.ПолучитьСтроку();
		Документ.НайтиДокумент(СписокДокументов.ПолучитьЗначение(НомерСтроки).ТекущийДокумент());
		Если Таблица.Пометка=ЗначениеНеПометки Тогда
			Продолжить;
		КонецЕсли;	               
		ДокОбработан=ОбработатьДокумент(Документ);
		Если ДокОбработан=1 Тогда
			Если УбиратьПометкуУОбработанных<>0 Тогда
				Таблица.Пометка=ЗначениеНеПометки;
			КонецЕсли;	
			ПоследнийОбработанныйДокумент = Документ;
			Сообщить("Выполняется обработка документа "+Строка(Документ));
            ЧислоОбработанныхДокументов = ЧислоОбработанныхДокументов + 1;
		ИначеЕсли ДокОбработан=-1 Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	Если (Действие.ТекущаяСтрока()=ИдентификаторДействияПроведения)ИЛИ(Действие.ТекущаяСтрока()=ИдентификаторДействияПроведенияСВосстановлениемПослед) Тогда // ("Провести");
		ПерерисовкаСписка("Статус");
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияОтменыПроведения Тогда // ("Отменить проведение");
		ПерерисовкаСписка("Статус");
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияПометкиНаУдаление Тогда // ("Пометить на удаление");
		ПерерисовкаСписка("Статус");
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияСнятияПометкиНаУдаление Тогда // ("Снять пометку удаления");
		ПерерисовкаСписка("Статус");
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияУстановкиКомментария Тогда // ("Установить комментарий");
	    ПерерисовкаСписка("Комментарий");
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияУстановкиТипаУчета Тогда // ("Установить тип учета");
	    ПерерисовкаСписка("Учет"); 
		ПерерисовкаСписка("Номер");
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияУстановкиДоговора Тогда // ("Установить договор");
	    ПерерисовкаСписка("Информация");
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияВыключенияПроводок Тогда // ("Выключить проводки");
	    ПерерисовкаСписка("Проводки");
	ИначеЕсли Действие.ТекущаяСтрока()=ИдентификаторДействияВключенияПроводок Тогда // ("Включить проводки");
	    ПерерисовкаСписка("Проводки");
	КонецЕсли;		

	Предупреждение("Групповая обработка завершена. Число обработанных документов: "+Строка(ЧислоОбработанныхДокументов));

КонецПроцедуры

Процедура ПриДвойномЩелчкеНаТаблице()
	Если Таблица.Пометка=ЗначениеНеПометки Тогда
		Таблица.Пометка = ЗначениеПометки;
	Иначе
		Таблица.Пометка = ЗначениеНеПометки;
	КонецЕсли;	
КонецПроцедуры

Процедура ПриОткрытии()
	Если ПустоеЗначение(Форма.Параметр)=1 Тогда
		Предупреждение("Не указан список обрабатываемых позиций. Данная обработка запускается автоматически из других процедур конфигурации.");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;	
	
	СписокДокументов = Форма.Параметр;
	СписокДокументов.Сортировать(0,1);

	ТаблицаПоследовательностей(ТаблПослед, БухИтоги, СписСчетов);
	Таблица.НоваяКолонка("Пометка","Число",4,0,"Пометка"); 
	Таблица.ВыводитьПиктограммы("Пометка",1);
	Таблица.НоваяКолонка("Дата","Строка",13,,"Дата");
	Таблица.НоваяКолонка("Документ","Строка",60,,"Документ"); 
	Таблица.НоваяКолонка("Номер","Строка",15,,"Номер");
	Таблица.НоваяКолонка("Учет","Строка",10,,"Учет"); 
	Таблица.НоваяКолонка("Проводки","Строка",10,,"Проводки");
	Таблица.НоваяКолонка("Автор","Строка",30,,"Автор");
	Таблица.НоваяКолонка("Статус","Строка",18,,"Статус");
	Таблица.НоваяКолонка("Сумма","Строка",20,,"Сумма");         
	Таблица.НоваяКолонка("Информация","Строка",100,,"Информация"); 
	Таблица.НоваяКолонка("Комментарий","Строка",100,,"Комментарий"); 
	                                       
	Таблица.КоличествоСтрок(СписокДокументов.РазмерСписка());
	Таблица.Фиксировать(0,1);                                
	КонтрагентВсехДокументов=0;
	Таблица.ВыбратьСтроки();    
	Для НомерСтроки = 1 По СписокДокументов.РазмерСписка() Цикл
		Таблица.ПолучитьСтроку();               
		Документ = СписокДокументов.ПолучитьЗначение(НомерСтроки);
	    Если СписокДокументовОперУчета.НайтиЗначение(Документ.Вид())<=0 Тогда 
		ИначеЕсли глЕстьРеквизитШапки("Клиент",Документ.Вид())=Да Тогда
			Если Документ.Клиент.Выбран()>0 Тогда 	// если задан клиент
				Если ПустоеЗначение(КонтрагентВсехДокументов)>0 Тогда
					КонтрагентВсехДокументов=Документ.Клиент.ТекущийЭлемент();
				ИначеЕсли КонтрагентВсехДокументов<>Документ.Клиент.ТекущийЭлемент() Тогда
					КонтрагентВсехДокументов=0;
					Прервать;
				КонецЕсли;
			Иначе	
				КонтрагентВсехДокументов=0;
				Прервать;	
			КонецЕсли;	    
		Иначе
			КонтрагентВсехДокументов=0;
			Прервать;	
		КонецЕсли;		
	КонецЦикла;	
	Действие.УдалитьВсе();
	Действие.ДобавитьЗначение("Выключить проводки");
	ИдентификаторДействияВыключенияПроводок = Действие.РазмерСписка();
    Действие.ДобавитьЗначение("Включить проводки");                   
	ИдентификаторДействияВключенияПроводок = Действие.РазмерСписка();
    
	Действие.ДобавитьЗначение("Провести");
	ИдентификаторДействияПроведения = Действие.РазмерСписка();
	              
	Действие.ДобавитьЗначение("Провести с восстановлением последовательностей");
	ИдентификаторДействияПроведенияСВосстановлениемПослед = Действие.РазмерСписка();
	
	Действие.ДобавитьЗначение("Отменить проведение");                 
	ИдентификаторДействияОтменыПроведения = Действие.РазмерСписка();
	
	Действие.ДобавитьЗначение("Пометить на удаление");  
	ИдентификаторДействияПометкиНаУдаление = Действие.РазмерСписка();
	
	Действие.ДобавитьЗначение("Снять пометку удаления");
	ИдентификаторДействияСнятияПометкиНаУдаление = Действие.РазмерСписка();
	
	Действие.ДобавитьЗначение("Установить комментарий");
	ИдентификаторДействияУстановкиКомментария = Действие.РазмерСписка();
	
	Действие.ДобавитьЗначение("Установить тип учета");
	ИдентификаторДействияУстановкиТипаУчета = Действие.РазмерСписка();
	
	Если ПустоеЗначение(КонтрагентВсехДокументов)=0 Тогда
		Действие.ДобавитьЗначение("Установить договор");
		ИдентификаторДействияУстановкиДоговора = Действие.РазмерСписка();
	Иначе
		ИдентификаторДействияУстановкиДоговора = -1;
	КонецЕсли;	
	Действие.ТекущаяСтрока(1);
	
	ТекСтрока = Действие.ТекущаяСтрока();
	ДоступностьКнопкиВыбораЗначения();
	
	ПерерисовкаСписка("");
	    
	ГрупповаяПометка(1);
	
КонецПроцедуры

НачальнаяДата = Дата('01.01.1980');
ЗначениеПометки = 2; 
ЗначениеНеПометки = 1;
СписокДокументовОперУчета = СоздатьОбъект("СписокЗначений"); 
СписокДокументовБухУчета = СоздатьОбъект("СписокЗначений");
СписокНеПроводимыхДокументов = СоздатьОбъект("СписокЗначений");
Для Индекс=1 По Метаданные.Документ() Цикл
	Если Метаданные.Документ(Индекс).РазрешитьПроведение = 0 Тогда
		СписокНеПроводимыхДокументов.ДобавитьЗначение(Метаданные.Документ(Индекс).Идентификатор);
	КонецЕсли; 
	Если Метаданные.Документ(Индекс).ОперативныйУчет<>0 Тогда
		СписокДокументовОперУчета.ДобавитьЗначение(Метаданные.Документ(Индекс).Идентификатор);
	КонецЕсли;
	Если Метаданные.Документ(Индекс).БухгалтерскийУчет<>0 Тогда
		СписокДокументовБухУчета.ДобавитьЗначение(Метаданные.Документ(Индекс).Идентификатор);
	КонецЕсли;
КонецЦикла;
